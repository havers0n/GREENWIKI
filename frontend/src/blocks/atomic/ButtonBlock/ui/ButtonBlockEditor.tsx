import React from 'react';
import { ButtonBlock } from './ButtonBlock';
import type { ButtonBlockEditorProps } from '../types';

/**
 * ButtonBlockEditor - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –≤ CMS
 * –î–æ–±–∞–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
 */
const ButtonBlockEditor: React.FC<ButtonBlockEditorProps> = ({
  editorMode = false,
  isSelected = false,
  onSelect,
  className,
  ...buttonProps
}) => {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–ª–æ–∫–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
  const handleContainerClick = (event: React.MouseEvent) => {
    if (editorMode && onSelect) {
      event.stopPropagation();
      onSelect();
    }
  };

  const isEmpty = !buttonProps.text || buttonProps.text.trim().length === 0;

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  const containerClassName = [
    className,
    'relative inline-block',
    editorMode && 'transition-all duration-200',
    editorMode && 'cursor-pointer group',
    isSelected && 'ring-2 ring-blue-500 ring-offset-2',
    editorMode && !isSelected && 'hover:ring-2 hover:ring-blue-300 hover:ring-opacity-50'
  ].filter(Boolean).join(' ');

  return (
    <div
      className={containerClassName}
      onClick={handleContainerClick}
    >
      <ButtonBlock
        {...buttonProps}
        text={buttonProps.text || (editorMode ? '–ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞' : '–ö–Ω–æ–ø–∫–∞')}
        className={isEmpty && editorMode ? 'opacity-75 border-dashed' : undefined}
      />

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ */}
      {editorMode && isSelected && (
        <div className="absolute -top-2 -right-2 bg-blue-500 text-white text-xs px-2 py-1 rounded shadow-lg z-10">
          üîò –ö–Ω–æ–ø–∫–∞
        </div>
      )}

      {/* Overlay –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ */}
      {editorMode && (
        <div className="absolute inset-0 bg-blue-500/10 opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none rounded" />
      )}

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—É—Å—Ç–æ–π –∫–Ω–æ–ø–∫–∏ */}
      {editorMode && isEmpty && (
        <div className="absolute -bottom-1 left-1/2 transform -translate-x-1/2 bg-gray-600 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
          –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–µ–∫—Å—Ç –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ ‚Üí
        </div>
      )}
    </div>
  );
};

ButtonBlockEditor.displayName = 'ButtonBlockEditor';

export default ButtonBlockEditor;