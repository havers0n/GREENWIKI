import React, { createContext, useContext, useEffect, useState } from 'react';
import type { User } from '@supabase/supabase-js';
import { supabase } from '../../supabase';
import type { Profile } from '../../supabase';

interface AuthContextType {
  user: User | null;
  profile: Profile | null;
  isLoading: boolean;
  loading: boolean; // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  error: string | null;
  isAdmin: boolean;
  signOut: () => Promise<void>;
  refreshProfile: () => Promise<void>;
  updateProfile: (updates: Partial<Profile>) => Promise<Profile | undefined>;
  clearError: () => void;
  forceCompleteLoading: () => void;
  createProfileTable: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [profile, setProfile] = useState<Profile | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // –≠–§–§–ï–ö–¢ ‚Ññ1: –¢–û–õ–¨–ö–û –°–ò–ù–•–†–û–ù–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–°–°–ò–ï–ô
  useEffect(() => {
    const fetchInitialSession = async () => {
      // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      const { data: { session } } = await supabase.auth.getSession();
      setUser(session?.user ?? null);
      // –í–ê–ñ–ù–û: –ú—ã —Å—Ç–∞–≤–∏–º isLoading –≤ false –ó–î–ï–°–¨, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç.
      // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –µ—Å—Ç—å, —Ç–æ –≠—Ñ—Ñ–µ–∫—Ç ‚Ññ2 –≤–æ–∑—å–º–µ—Ç –Ω–∞ —Å–µ–±—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ isLoading.
      if (!session) {
        setIsLoading(false);
      }
    };

    fetchInitialSession();

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –±—É–¥—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ª–æ–≥–∏–Ω, –ª–æ–≥–∞—É—Ç)
    const { data: authListener } = supabase.auth.onAuthStateChange((event: string, session: any) => {
      console.log('üîÑ Auth state changed:', event, session ? 'session present' : 'no session');

      setUser(session?.user ?? null);

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ö–æ–¥–∏—Ç, —Å—Ä–∞–∑—É –∂–µ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
      if (event === 'SIGNED_OUT') {
        console.log('üë§ User signed out, clearing state');
        setProfile(null);
        setIsLoading(false);
      }
    });

    return () => {
      authListener.subscription.unsubscribe();
    };
  }, []);

  // –≠–§–§–ï–ö–¢ ‚Ññ2: –†–ï–ê–ö–¢–ò–í–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ü–†–û–§–ò–õ–Ø
  // –≠—Ç–æ—Ç useEffect –ó–ê–í–ò–°–ò–¢ –æ—Ç `user`. –û–Ω –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ `user` –º–µ–Ω—è–µ—Ç—Å—è.
  // –≠—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π useEffect, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç fetchProfile.
  useEffect(() => {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–æ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è - –Ω–∞–¥–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å.
    if (user) {
      setIsLoading(true); // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
      supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id)
        .single()
        .then(({ data, error }: { data: Profile | null; error: any }) => {
          if (error) {
            console.error('Error fetching profile:', error);
            setProfile(null);
          } else {
            setProfile(data);
          }
          // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –í–ù–ï –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
          setIsLoading(false);
        });
    }
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Ç–æ –∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞–º –Ω–µ –Ω—É–∂–µ–Ω.
    // isLoading —É–∂–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ false –≤ –≠—Ñ—Ñ–µ–∫—Ç–µ ‚Ññ1.
  }, [user]); // <-- –ö–õ–Æ–ß–ï–í–û–ô –ú–û–ú–ï–ù–¢!



  const refreshProfile = async () => {
    if (user) {
      setIsLoading(true);
      supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id)
        .single()
        .then(({ data, error }: { data: Profile | null; error: any }) => {
          if (error) {
            console.error('Error refreshing profile:', error);
            setProfile(null);
          } else {
            setProfile(data);
          }
          setIsLoading(false);
        });
    }
  };

  const signOut = async () => {
    console.log('üîÑ Signing out...');
    try {
      const { error } = await supabase.auth.signOut();
      if (error) {
        console.error('‚ùå Sign out error:', error);
        throw error;
      }
      console.log('‚úÖ Sign out successful');
    } catch (error) {
      console.error('‚ùå Error signing out:', error);
      throw error;
    }
  };

  const updateProfile = async (updates: Partial<Profile>) => {
    if (!user?.id) return;

    try {
      const { data, error } = await supabase
        .from('profiles')
        .update(updates)
        .eq('id', user.id)
        .select()
        .single();

      if (error) {
        console.error('Error updating profile:', error);
        throw error as any;
      }

      setProfile(data);
      setError(null);
      return data;
    } catch (error) {
      console.error('Error updating profile:', error);
      setError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
      throw error as any;
    }
  };

  const clearError = () => {
    setError(null);
  };

  const createProfileTable = async () => {
    try {
      console.log('üîß Creating profiles table...');

      const { error: rpcError } = await supabase.rpc('create_profiles_table');

      if (rpcError) {
        console.log('RPC function not available, trying direct SQL...');
        setError('–¢–∞–±–ª–∏—Ü–∞ profiles –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ /debug –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã.');
        return;
      }

      console.log('‚úÖ Profiles table created successfully');
      setError(null);

      if (user) {
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–µ user
        setUser({ ...user });
      }

    } catch (error: any) {
      console.error('Error creating profiles table:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É profiles. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ /debug.');
    }
  };

  const forceCompleteLoading = () => {
    console.log('üîß Force completing loading...');
    setIsLoading(false);
    setError('–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
  if (typeof window !== 'undefined') {
    (window as any).__AUTH_DEBUG__ = {
      user,
      profile,
      isLoading,
      loading: isLoading, // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
      error,
      isAdmin: profile?.role === 'admin',
      timestamp: new Date().toISOString(),
    };

    (window as any).forceCompleteAuthLoading = forceCompleteLoading;
    (window as any).createProfileTable = createProfileTable;
    (window as any).checkSupabaseConfig = () => ({
      url: import.meta.env.VITE_SUPABASE_URL ? 'present' : 'MISSING',
      key: import.meta.env.VITE_SUPABASE_ANON_KEY ? 'present' : 'MISSING',
      configured: !!(import.meta.env.VITE_SUPABASE_URL && import.meta.env.VITE_SUPABASE_ANON_KEY),
      timestamp: new Date().toISOString()
    });
  }

  const value = {
    user,
    profile,
    isLoading,
    loading: isLoading, // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    error,
    isAdmin: profile?.role === 'admin',
    signOut,
    refreshProfile,
    updateProfile,
    clearError,
    forceCompleteLoading,
    createProfileTable,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};