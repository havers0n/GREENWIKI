import { createSlice } from '@reduxjs/toolkit';
import type { PayloadAction } from '@reduxjs/toolkit';
import type { ContentItem, BlockData, BlockNode, LayoutApiResponse } from '../../types/api';
import {
  addBlockToTree as addBlockToTreeUtil,
  updateBlockInTree as updateBlockInTreeUtil,
  removeBlockFromTree as removeBlockFromTreeUtil,
  moveBlockInTree as moveBlockInTreeUtil,
  findBlockById,
  flattenTree,
  buildTreeFromFlat
} from './treeUtils';

interface ContentState {
  // –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  items: ContentItem[];
  currentItem: ContentItem | null;

  // –î–µ—Ä–µ–≤–æ –±–ª–æ–∫–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã)
  blockTree: BlockNode[];

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  loading: {
    list: boolean;
    item: boolean;
    save: boolean;
    publish: boolean;
  };

  // –û—à–∏–±–∫–∏
  errors: {
    list?: string;
    item?: string;
    save?: string;
    publish?: string;
  };

  // –§–∏–ª—å—Ç—Ä—ã –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è
  filters: {
    type?: string;
    status?: 'draft' | 'published' | 'archived';
    author?: string;
    search?: string;
  };

  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
  };

  // –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  hasUnsavedChanges: boolean;
  lastSaved: Date | null;
}

const initialState: ContentState = {
  items: [],
  currentItem: null,
  blockTree: [],

  loading: {
    list: false,
    item: false,
    save: false,
    publish: false,
  },

  errors: {},

  filters: {},

  pagination: {
    page: 1,
    limit: 20,
    total: 0,
    totalPages: 0,
  },

  hasUnsavedChanges: false,
  lastSaved: null,
};

const contentSlice = createSlice({
  name: 'content',
  initialState,
  reducers: {
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    setContentItems: (state, action: PayloadAction<ContentItem[]>) => {
      state.items = action.payload;
    },

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    addContentItem: (state, action: PayloadAction<ContentItem>) => {
      state.items.unshift(action.payload);
      state.hasUnsavedChanges = true;
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    updateContentItem: (state, action: PayloadAction<ContentItem>) => {
      const index = state.items.findIndex(item => item.id === action.payload.id);
      if (index !== -1) {
        state.items[index] = action.payload;
        state.hasUnsavedChanges = true;
      }
    },

    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    removeContentItem: (state, action: PayloadAction<string>) => {
      state.items = state.items.filter(item => item.id !== action.payload);
      state.hasUnsavedChanges = true;
    },

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    setCurrentItem: (state, action: PayloadAction<ContentItem | null>) => {
      state.currentItem = action.payload;
    },

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–æ–º –±–ª–æ–∫–æ–≤ (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
    setBlockTree: (state, action: PayloadAction<BlockNode[]>) => {
      state.blockTree = action.payload;
    },

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ä–µ–≤–∞ –∏–∑ API
    setLayoutFromApi: (state, action: PayloadAction<LayoutApiResponse>) => {
      state.blockTree = action.payload.blocks;
    },

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ –≤ –¥–µ—Ä–µ–≤–æ
    addBlockToTree: (state, action: PayloadAction<{
      block: BlockNode;
      parentId: string | null;
      position: number;
    }>) => {
      const { block, parentId, position } = action.payload;
      state.blockTree = addBlockToTreeUtil(state.blockTree, block, parentId, position);
      state.hasUnsavedChanges = true;
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ –≤ –¥–µ—Ä–µ–≤–µ
    updateBlockInTree: (state, action: PayloadAction<{
      blockId: string;
      updates: Partial<BlockNode>;
    }>) => {
      const { blockId, updates } = action.payload;
      state.blockTree = updateBlockInTreeUtil(state.blockTree, blockId, updates);
      state.hasUnsavedChanges = true;
    },

    // –£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ –∏–∑ –¥–µ—Ä–µ–≤–∞
    removeBlockFromTree: (state, action: PayloadAction<string>) => {
      state.blockTree = removeBlockFromTreeUtil(state.blockTree, action.payload);
      state.hasUnsavedChanges = true;
    },

    // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –±–ª–æ–∫–∞ –≤ –¥–µ—Ä–µ–≤–µ
    moveBlockInTree: (state, action: PayloadAction<{
      blockId: string;
      newParentId: string | null;
      newPosition: number;
    }>) => {
      const { blockId, newParentId, newPosition } = action.payload;

      console.log('üîÑ Redux: moveBlockInTree called', { blockId, newParentId, newPosition });
      console.log('üîÑ Redux: blockTree before:', state.blockTree.map(b => ({
        id: b.id,
        parent: b.parent_block_id,
        position: b.position,
        children: b.children?.length || 0
      })));

      state.blockTree = moveBlockInTreeUtil(state.blockTree, blockId, newParentId, newPosition);

      console.log('üîÑ Redux: blockTree after:', state.blockTree.map(b => ({
        id: b.id,
        parent: b.parent_block_id,
        position: b.position,
        children: b.children?.length || 0
      })));

      state.hasUnsavedChanges = true;
    },

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏ (overrides)
    updateBlockOverrides: (state, action: PayloadAction<{
      blockId: string;
      overrides: Record<string, any>;
    }>) => {
      const { blockId, overrides } = action.payload;
      state.blockTree = updateBlockInTreeUtil(state.blockTree, blockId, { overrides });
      state.hasUnsavedChanges = true;
    },

    setBlockOverride: (state, action: PayloadAction<{
      blockId: string;
      path: string;
      value: any;
    }>) => {
      const { blockId, path, value } = action.payload;
      const block = findBlockById(state.blockTree, blockId);
      if (block) {
        const currentOverrides = block.overrides || {};
        const newOverrides = { ...currentOverrides, [path]: value };
        state.blockTree = updateBlockInTreeUtil(state.blockTree, blockId, { overrides: newOverrides });
        state.hasUnsavedChanges = true;
      }
    },

    removeBlockOverride: (state, action: PayloadAction<{
      blockId: string;
      path: string;
    }>) => {
      const { blockId, path } = action.payload;
      const block = findBlockById(state.blockTree, blockId);
      if (block && block.overrides) {
        const newOverrides = { ...block.overrides };
        delete newOverrides[path];
        state.blockTree = updateBlockInTreeUtil(state.blockTree, blockId, { overrides: newOverrides });
        state.hasUnsavedChanges = true;
      }
    },

    clearBlockOverrides: (state, action: PayloadAction<string>) => {
      const blockId = action.payload;
      state.blockTree = updateBlockInTreeUtil(state.blockTree, blockId, { overrides: {} });
      state.hasUnsavedChanges = true;
    },

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–æ–π
    setLoading: (state, action: PayloadAction<{ key: keyof ContentState['loading']; value: boolean }>) => {
      state.loading[action.payload.key] = action.payload.value;
    },

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∞–º–∏
    setError: (state, action: PayloadAction<{ key: keyof ContentState['errors']; value: string }>) => {
      state.errors[action.payload.key] = action.payload.value;
    },

    clearError: (state, action: PayloadAction<keyof ContentState['errors']>) => {
      delete state.errors[action.payload];
    },

    // –§–∏–ª—å—Ç—Ä—ã
    setFilters: (state, action: PayloadAction<Partial<ContentState['filters']>>) => {
      state.filters = { ...state.filters, ...action.payload };
      state.pagination.page = 1; // –°–±—Ä–æ—Å –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    },

    clearFilters: (state) => {
      state.filters = {};
      state.pagination.page = 1;
    },

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    setPagination: (state, action: PayloadAction<Partial<ContentState['pagination']>>) => {
      state.pagination = { ...state.pagination, ...action.payload };
    },

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    setHasUnsavedChanges: (state, action: PayloadAction<boolean>) => {
      state.hasUnsavedChanges = action.payload;
    },

    setLastSaved: (state, action: PayloadAction<Date>) => {
      state.lastSaved = action.payload;
      state.hasUnsavedChanges = false;
    },

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    resetContentState: () => initialState,
  },
});

export const {
  // Content management
  setContentItems,
  addContentItem,
  updateContentItem,
  removeContentItem,
  setCurrentItem,

  // Tree block management (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–∫—à–µ–Ω—ã)
  setBlockTree,
  setLayoutFromApi,
  addBlockToTree,
  updateBlockInTree,
  removeBlockFromTree,
  moveBlockInTree,

  // Overrides management
  updateBlockOverrides,
  setBlockOverride,
  removeBlockOverride,
  clearBlockOverrides,

  // Loading and error management
  setLoading,
  setError,
  clearError,
  setFilters,
  clearFilters,
  setPagination,
  setHasUnsavedChanges,
  setLastSaved,
  resetContentState,
} = contentSlice.actions;

export default contentSlice.reducer;
