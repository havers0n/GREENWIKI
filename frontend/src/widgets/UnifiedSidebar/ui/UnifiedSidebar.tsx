import React, { useState } from 'react';
import { ContextualInspector } from '../../ContextualInspector/indexNew';
import BlockLibrarySidebar from './BlockLibrarySidebar';
import ReusableBlocksLibrarySidebar from './ReusableBlocksLibrarySidebar';
import type { UnifiedSidebarProps, SidebarView } from '../types';

/**
 * UnifiedSidebar - –µ–¥–∏–Ω—ã–π –∫–æ–º–∞–Ω–¥–Ω—ã–π —Ü–µ–Ω—Ç—Ä –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–¥–∞ –∏ —Ä–µ–Ω–¥–µ—Ä–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
 */
const UnifiedSidebar: React.FC<UnifiedSidebarProps> = ({
  selectedBlockId,
  selectedBlock,
  onBlockChange,
  onPublishToggle,
  publishing,
  onBlockDelete,
  allBlocks,
  onMoveLeft,
  onMoveRight,
  onAddBlock,
  adding,
  pageIdentifier,
  externalActiveView,
  onViewChange,
}) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–¥–∞ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∏–ª–∏ –≤–Ω–µ—à–Ω–µ–µ)
  const [internalActiveView, setInternalActiveView] = useState<SidebarView>(
    selectedBlockId ? 'INSPECTOR' : 'PAGE_SETTINGS'
  );

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–æ–º, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
  const activeView = externalActiveView !== undefined ? externalActiveView : internalActiveView;

  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤–∏–¥ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ selectedBlockId
  React.useEffect(() => {
    if (selectedBlockId) {
      if (activeView === 'PAGE_SETTINGS') {
        if (onViewChange) {
          onViewChange('INSPECTOR');
        } else {
          setInternalActiveView('INSPECTOR');
        }
      }
    } else {
      if (activeView === 'INSPECTOR') {
        if (onViewChange) {
          onViewChange('PAGE_SETTINGS');
        } else {
          setInternalActiveView('PAGE_SETTINGS');
        }
      }
    }
  }, [selectedBlockId, activeView, onViewChange]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–æ–≤
  const handleViewChange = (view: SidebarView) => {
    if (onViewChange) {
      onViewChange(view);
    } else {
      setInternalActiveView(view);
    }
  };

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const renderNavigation = () => (
    <div className="flex items-center gap-1 p-3 border-b border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800">
      {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∏–Ω—Å–ø–µ–∫—Ç–æ—Ä) */}
      <button
        onClick={() => handleViewChange('INSPECTOR')}
        className={`flex items-center justify-center w-8 h-8 rounded-md transition-colors ${
          activeView === 'INSPECTOR'
            ? 'bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300'
            : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700'
        } ${!selectedBlockId ? 'opacity-50 cursor-not-allowed' : ''}`}
        title={selectedBlockId ? "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–ª–æ–∫–∞" : "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"}
        disabled={!selectedBlockId}
      >
        ‚öôÔ∏è
      </button>

      {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫ */}
      <button
        onClick={() => handleViewChange('BLOCK_LIBRARY')}
        className={`flex items-center justify-center w-8 h-8 rounded-md transition-colors ${
          activeView === 'BLOCK_LIBRARY'
            ? 'bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300'
            : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700'
        }`}
        title="–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –±–ª–æ–∫–æ–≤"
      >
        ‚ûï
      </button>

      {/* –ö–Ω–æ–ø–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ */}
      <button
        onClick={() => handleViewChange('REUSABLE_LIBRARY')}
        className={`flex items-center justify-center w-8 h-8 rounded-md transition-colors ${
          activeView === 'REUSABLE_LIBRARY'
            ? 'bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300'
            : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700'
        }`}
        title="–ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –±–ª–æ–∫–∏"
      >
        üß©
      </button>
    </div>
  );

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–¥–∞
  const renderContent = () => {
    switch (activeView) {
      case 'INSPECTOR':
        if (!selectedBlockId) {
          return (
            <div className="flex items-center justify-center h-full text-center text-gray-500 dark:text-gray-400">
              <div>
                <div className="text-3xl mb-2">üëÜ</div>
                <p className="text-sm">–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>
                <p className="text-xs mt-1 opacity-75">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ª—é–±–æ–π –±–ª–æ–∫ —Å–ª–µ–≤–∞</p>
              </div>
            </div>
          );
        }
        return (
          <div data-tutorial="inspector">
            <ContextualInspector
              block={selectedBlock}
              isOpen={true}
              onClose={() => {}} // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
              onBlockChange={onBlockChange}
              onPublishToggle={async (blockId) => onPublishToggle(blockId)}
              publishing={publishing}
              onBlockDelete={(blockId) => onBlockDelete(blockId)}
              allBlocks={allBlocks}
              onMoveLeft={(blockId) => onMoveLeft(blockId)}
              onMoveRight={(blockId) => onMoveRight(blockId)}
              blockId={selectedBlockId}
            />
          </div>
        );

      case 'BLOCK_LIBRARY':
        return (
          <BlockLibrarySidebar
            onAddBlock={onAddBlock}
            creating={adding}
          />
        );

      case 'REUSABLE_LIBRARY':
        return (
          <ReusableBlocksLibrarySidebar />
        );

      case 'PAGE_SETTINGS':
      default:
        return (
          <div className="flex items-center justify-center h-full text-center text-gray-500 dark:text-gray-400">
            <div>
              <div className="text-3xl mb-2">‚öôÔ∏è</div>
              <p className="text-sm">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</p>
              <p className="text-xs mt-1 opacity-75">–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ</p>
            </div>
          </div>
        );
    }
  };

  return (
    <div
      className="w-96 bg-white dark:bg-gray-900 border-l border-gray-200 dark:border-gray-700 flex flex-col h-full"
      data-tutorial="sidebar"
    >
      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      {renderNavigation()}

      {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ */}
      <div className="flex-1 overflow-hidden">
        {renderContent()}
      </div>
    </div>
  );
};

export default UnifiedSidebar;
