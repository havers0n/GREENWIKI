import React, { useMemo, useState } from 'react';
import { blockRegistry } from 'shared/config/blockRegistry';
import type { BlockSpec } from 'shared/config/blockRegistry';
import { Input, Accordion } from '@my-forum/ui';
import { ComponentCard } from 'shared/components';
import { useFavorites } from 'shared/hooks/useFavorites';
import { useDraggable } from '@dnd-kit/core';
import { CSS } from '@dnd-kit/utilities';

interface BlockLibrarySidebarProps {
  onAddBlock?: (type: string) => void | Promise<void>;
  creating?: boolean;
  disabledTypes?: string[];
}

/**
 * BlockLibrarySidebar - –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è BlockLibrary –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ UnifiedSidebar
 * –£–±—Ä–∞–Ω–∞ Card –æ–±–µ—Ä—Ç–∫–∞ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–∫—Ä–æ–ª–ª–∞
 */
const BlockLibrarySidebar: React.FC<BlockLibrarySidebarProps> = ({
  onAddBlock,
  creating = false,
  disabledTypes
}) => {
  const [search, setSearch] = useState('');
  const { favorites } = useFavorites();

  const specs = useMemo(() => Object.values(blockRegistry), []);

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const groupedSpecs = useMemo(() => {
    const groups: Record<string, BlockSpec<any>[]> = {};
    const q = search.trim().toLowerCase();

    // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    if (favorites.length > 0 && q.length === 0) {
      groups['–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'] = [];
      for (const spec of specs) {
        if (favorites.includes(spec.type)) {
          groups['–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'].push(spec);
        }
      }
    }

    // –ó–∞—Ç–µ–º –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    for (const spec of specs) {
      const haystack = [
        spec.name,
        spec.type,
        spec.description ?? '',
        ...(spec.tags ?? []),
      ].join(' ').toLowerCase();
      const matchQuery = q.length === 0 ? true : haystack.includes(q);

      if (matchQuery) {
        const category = spec.category || '–†–∞–∑–Ω–æ–µ';
        if (!groups[category]) {
          groups[category] = [];
        }
        groups[category].push(spec);
      }
    }

    return groups;
  }, [specs, search, favorites]);

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const categoryOrder = ['–ò–∑–±—Ä–∞–Ω–Ω–æ–µ', '–°—Ç—Ä—É–∫—Ç—É—Ä–∞', '–ö–æ–Ω—Ç–µ–Ω—Ç', '–ö–æ–º–ø–æ–∑–∏—Ç—ã'];
  const sortedCategories = useMemo(() => {
    const categories = Object.keys(groupedSpecs);
    return categories.sort((a, b) => {
      const indexA = categoryOrder.indexOf(a);
      const indexB = categoryOrder.indexOf(b);

      if (indexA !== -1 && indexB !== -1) {
        return indexA - indexB;
      }
      if (indexA !== -1) return -1;
      if (indexB !== -1) return 1;
      return a.localeCompare(b);
    });
  }, [groupedSpecs]);

  // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
  const accordionItems = useMemo(() => {
    return sortedCategories.map(category => ({
      id: category,
      title: category,
      content: (
        <div className="grid grid-cols-1 gap-3">
          {groupedSpecs[category].map((spec) => (
            <DraggableLibraryItem
              key={spec.type}
              spec={spec}
              disabled={creating || (disabledTypes?.includes(spec.type) ?? false)}
              onAddBlock={onAddBlock}
              creating={creating}
            />
          ))}
        </div>
      )
    }));
  }, [sortedCategories, groupedSpecs, creating, disabledTypes, onAddBlock]);

  return (
    <div className="h-full flex flex-col">
      {/* –ü–æ–∏—Å–∫ */}
      <div className="p-4 border-b border-gray-200 dark:border-gray-700">
        <Input
          label="–ü–æ–∏—Å–∫ –±–ª–æ–∫–æ–≤"
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ, —Ç–µ–≥ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ"
        />
      </div>

      {/* –°–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤ */}
      <div className="flex-1 overflow-y-auto p-4">
        {sortedCategories.length === 0 ? (
          <div className="text-sm text-gray-500 dark:text-gray-400 text-center py-8">
            –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ò–∑–º–µ–Ω–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.
          </div>
        ) : (
          <Accordion
            items={accordionItems}
            defaultExpanded={groupedSpecs['–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'] ? ['–ò–∑–±—Ä–∞–Ω–Ω–æ–µ', '–°—Ç—Ä—É–∫—Ç—É—Ä–∞'] : ['–°—Ç—Ä—É–∫—Ç—É—Ä–∞']}
            allowMultiple={true}
          />
        )}
      </div>
    </div>
  );
};

const DraggableLibraryItem: React.FC<{
  spec: BlockSpec<any>;
  disabled: boolean;
  creating: boolean;
  onAddBlock?: (type: string) => void | Promise<void>;
}> = ({ spec, disabled, creating, onAddBlock }) => {
  const { attributes, listeners, setNodeRef, transform, isDragging } = useDraggable({
    id: `block-type:${spec.type}`,
    disabled: disabled
  });

  const style: React.CSSProperties = {
    transform: CSS.Transform.toString(transform),
    opacity: isDragging ? 0.85 : 1,
  };

  const handleAdd = async () => {
    try {
      console.log('üöÄ SIDEBAR DRAGGABLE: handleAdd called for spec:', spec.type);
      if (onAddBlock) {
        console.log('üöÄ SIDEBAR DRAGGABLE: Calling onAddBlock with type:', spec.type);
        await onAddBlock(spec.type);
        console.log('‚úÖ SIDEBAR DRAGGABLE: Block added successfully');
      } else {
        console.warn('‚ùå SIDEBAR DRAGGABLE: onAddBlock function not provided');
      }
    } catch (error) {
      console.error('‚ùå SIDEBAR DRAGGABLE: Error adding block:', error);
    }
  };

  return (
    <div
      ref={setNodeRef}
      style={style}
      {...attributes}
      {...listeners}
      className="transition-all duration-200"
    >
      <div data-tutorial={spec.type === 'heading' ? 'block-item' : undefined}>
        <ComponentCard
          spec={spec}
          onAdd={handleAdd}
          disabled={disabled}
          creating={creating}
        />
      </div>
    </div>
  );
};

export default BlockLibrarySidebar;
