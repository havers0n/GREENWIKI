import React, { useState } from 'react';
import type { Database } from '@my-forum/db-types';
import { Typography, Button } from 'shared/ui/atoms';
import { blockRegistry } from 'shared/config/blockRegistry';

type LayoutBlock = Database['public']['Tables']['layout_blocks']['Row'];

interface SettingsFormProps {
	block: LayoutBlock | null;
	onBlockChange: (updatedBlock: LayoutBlock) => void;
	onClose: () => void;
}

const SettingsForm: React.FC<SettingsFormProps> = ({ block, onBlockChange, onClose }) => {
	const [validationError, setValidationError] = useState<string | null>(null);

	if (!block) {
		return (
			<div className="space-y-4">
				<div className="flex items-center justify-between">
					<Typography as="h3" variant="h3">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–ª–æ–∫–∞</Typography>
				</div>
				<div className="text-center py-12">
					<div className="text-4xl mb-3">üîß</div>
					<Typography className="text-gray-500 dark:text-gray-400 mb-2">
						–ë–ª–æ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω
					</Typography>
					<Typography className="text-sm text-gray-400 dark:text-gray-500">
						–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –≤ –ø—Ä–µ–≤—å—é –∏–ª–∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ "–°—Ç—Ä—É–∫—Ç—É—Ä–∞" –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
					</Typography>
				</div>
			</div>
		);
	}

	const spec = blockRegistry[block.block_type];
	if (!spec) {
		return (
			<div className="space-y-4">
				<div className="flex items-center justify-between">
					<Typography as="h3" variant="h3">–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–ª–æ–∫–∞</Typography>
					<Button onClick={onClose} size="sm" variant="secondary">
						–ó–∞–∫—Ä—ã—Ç—å
					</Button>
				</div>
				<div className="text-center py-8">
					<div className="text-4xl mb-3">‚ùì</div>
					<Typography className="text-gray-500 dark:text-gray-400 mb-2">
						–¢–∏–ø –±–ª–æ–∫–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
					</Typography>
					<Typography className="text-sm text-gray-400 dark:text-gray-500">
						–¢–∏–ø: {block.block_type}
					</Typography>
				</div>
			</div>
		);
	}

	const Editor = spec.Editor as React.FC<{ data: unknown; onChange: (d: unknown) => void }>;
	const data = (block.content ?? spec.defaultData()) as unknown;

	// –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –±–ª–æ–∫–∞
	const getBlockIcon = (blockType: string) => {
		switch (blockType) {
			case 'header': return 'üè†';
			case 'container_section': return 'üì¶';
			case 'button_group': return 'üîò';
			case 'categories_section': return 'üìÅ';
			case 'controls_section': return '‚öôÔ∏è';
			case 'properties_section': return 'üè¢';
			case 'animations_section': return 'üé¨';
			case 'changelog_section': return 'üìù';
			default: return 'üìÑ';
		}
	};

	const getStatusInfo = (status: string) => {
		switch (status) {
			case 'published':
				return { text: '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω', color: 'text-green-600 dark:text-green-400', icon: '‚úì' };
			case 'draft':
				return { text: '–ß–µ—Ä–Ω–æ–≤–∏–∫', color: 'text-yellow-600 dark:text-yellow-400', icon: '‚óã' };
			default:
				return { text: status, color: 'text-gray-500 dark:text-gray-400', icon: '‚óã' };
		}
	};

	const statusInfo = getStatusInfo(block.status);

	return (
		<div className="space-y-4">
			{/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–ª–æ–∫–µ */}
			<div className="space-y-3">
				<div className="flex items-center justify-between">
					<div className="flex items-center gap-2">
						<span className="text-lg">{getBlockIcon(block.block_type)}</span>
						<Typography as="h3" variant="h3">
							{spec.name}
						</Typography>
					</div>
					<Button onClick={onClose} size="sm" variant="secondary">
						–ó–∞–∫—Ä—ã—Ç—å
					</Button>
				</div>
				
				{/* –ú–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–µ */}
				<div className="flex items-center gap-4 text-sm">
					<span className="text-gray-500 dark:text-gray-400">
						–ü–æ–∑–∏—Ü–∏—è: #{block.position}
					</span>
					<span className={statusInfo.color}>
						{statusInfo.icon} {statusInfo.text}
					</span>
					{block.parent_block_id && block.slot && (
						<span className="text-purple-600 dark:text-purple-400">
							–°–ª–æ—Ç: {block.slot}
						</span>
					)}
				</div>
				
				{spec.description && (
					<div className="text-sm text-gray-600 dark:text-gray-300 bg-gray-50 dark:bg-gray-800/50 rounded-lg p-3">
						{spec.description}
					</div>
				)}
			</div>

			{/* –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
			<div className="border-t border-gray-200 dark:border-gray-700 pt-4">
				<Typography as="h4" className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
					–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–ª–æ–∫–∞
				</Typography>
				
				<div className="space-y-4">
					<Editor
						data={data}
						onChange={(newData) => {
							try {
								if (spec.schema) {
									// eslint-disable-next-line @typescript-eslint/no-explicit-any
									const result = (spec.schema as any).safeParse(newData);
									if (!result.success) {
										setValidationError(result.error?.errors?.[0]?.message ?? '–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é');
										return;
									}
								}
								setValidationError(null);
								const updated: LayoutBlock = { ...block, content: newData as object } as LayoutBlock;
								onBlockChange(updated);
							} catch {
								setValidationError('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
							}
						}}
					/>
					
					{validationError && (
						<div className="p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
							<div className="flex items-center gap-2">
								<span className="text-red-500">‚ö†Ô∏è</span>
								<span className="text-sm text-red-700 dark:text-red-300">{validationError}</span>
							</div>
						</div>
					)}
				</div>
			</div>
		</div>
	);
};

export default SettingsForm;
