import React from 'react';
import type { BlockContentEditorProps } from '../types';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–ª–æ–∫–∞
 * –°–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è —Ç–∏–ø–∞ –±–ª–æ–∫–∞
 */
const BlockContentEditor: React.FC<BlockContentEditorProps> = ({
  block,
  spec,
  data,
  onBlockChange
}) => {
  const Editor = spec.Editor as React.FC<{ data: unknown; onChange: (d: unknown) => void }>;

  if (!Editor) {
    return (
      <div className="text-center py-8 text-gray-500 dark:text-gray-400">
        <div className="text-2xl mb-2">üìù</div>
        <p className="text-sm">–†–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –±–ª–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>
      </div>
    );
  }

  const handleDataChange = (newData: unknown) => {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ö–µ–º–∞
      if (spec.schema) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const result = (spec.schema as any).safeParse(newData);
        if (!result.success) {
          console.warn('Validation error:', result.error?.errors?.[0]?.message);
          return;
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const updated = { ...block, content: newData as object } as typeof block;
      onBlockChange(updated);
    } catch (error) {
      console.warn('Error updating block:', error);
    }
  };

  return (
    <div className="space-y-4">
      <Editor
        data={data}
        onChange={handleDataChange}
      />
    </div>
  );
};

BlockContentEditor.displayName = 'BlockContentEditor';

export { BlockContentEditor };
export default BlockContentEditor;
