import React, { useEffect, useState, useCallback } from 'react';
import type { Database, TablesInsert } from '@my-forum/db-types';
import { Card, Spinner } from '@my-forum/ui';
import BlockRenderer from '../BlockRenderer';
import { VirtualizedCanvas } from '../VirtualizedCanvas';
import EditorToolbar from '../EditorToolbar';
import { UnifiedSidebar, type SidebarView } from '../UnifiedSidebar';
import { fetchAdminLayoutByPage, createLayoutBlock, updateLayoutBlock, deleteLayoutBlock, updateLayoutPositions, fetchLayoutRevisions, createLayoutRevision, revertToLayoutRevision } from '../../shared/api/layout';
import { blockRegistry } from '../../shared/config/blockRegistry';
import { DndContext, PointerSensor, KeyboardSensor, useSensor, useSensors, useDroppable, DragOverlay, type DragEndEvent, type DragStartEvent, pointerWithin, closestCenter } from '@dnd-kit/core';
import { rectSortingStrategy } from '@dnd-kit/sortable';
import { useParams } from 'react-router-dom';
import { fetchAdminPages } from '../../shared/api/pages';
import OnboardingTutorial from '../OnboardingTutorial';

// Redux imports
import { useAppDispatch, useAppSelector } from 'store/hooks';
import {
  setLayoutFromApi,
  addBlockToTree,
  updateBlockInTree,
  removeBlockFromTree,
  moveBlockInTree
} from 'store/slices/contentSlice';
import { instantiateReusableBlock } from 'store/slices/reusableBlocksSlice';
// import type { BlockNode } from '../../../types/api';

interface BlockNode {
  id: string;
  block_type: string;
  content: Record<string, any> | null;
  depth: number;
  instance_id: string | null;
  metadata: Record<string, any>;
  page_id: number;
  position: number | null;
  slot: string | null;
  status: string;
  children: BlockNode[];
}

type LayoutBlock = Database['public']['Tables']['layout_blocks']['Row'];
type PageRow = Database['public']['Tables']['pages']['Row'];

interface LiveEditorProps {
  pageSlug: string;
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ localStorage
 */
const getInitialHistory = (key: string): BlockNode[][] => {
  try {
    const savedHistory = window.localStorage.getItem(key);
    // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –µ—Å—Ç—å, –ø–∞—Ä—Å–∏–º –µ–µ, –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    return savedHistory ? JSON.parse(savedHistory) : [];
  } catch (error) {
    console.error(`Failed to parse history from localStorage for key: ${key}`, error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    return [];
  }
};

const LiveEditor = ({ pageSlug }: LiveEditorProps) => {
  // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const { pageSlug: urlPageSlug } = useParams<{ pageSlug: string }>();
  const dispatch = useAppDispatch();

  // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ Redux
  const blockTree = useAppSelector(state => {
    console.log('üîÑ NewLiveEditor: blockTree from Redux:', state.content.blockTree.map(b => ({
      id: b.id,
      parent: b.parent_block_id,
      position: b.position,
      children: b.children?.length || 0
    })));
    return state.content.blockTree;
  });

  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  	// console.log('NewLiveEditor: Initialized with pageSlug:', pageSlug);

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º pageSlug –∏–∑ URL –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã
	const currentPageSlug = urlPageSlug || pageSlug || 'home';

  // Canvas drop zone –¥–ª—è —Å–±—Ä–æ—Å–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
  const { setNodeRef: setCanvasRef, isOver: isCanvasOver } = useDroppable({
    id: 'canvas-dropzone',
  });

  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è UI
  const [selectedBlockId, setSelectedBlockId] = useState<string | null>(null);
  const [selectedBlockIds, setSelectedBlockIds] = useState<string[]>([]);
  const [isShiftPressed, setIsShiftPressed] = useState<boolean>(false);
  const [adding, setAdding] = useState<boolean>(false);
  const [activeBlock, setActiveBlock] = useState<BlockNode | null>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è UnifiedSidebar
  const [sidebarActiveView, setSidebarActiveView] = useState<SidebarView>('PAGE_SETTINGS');

  // Confirm-—Å—Ü–µ–Ω–∞—Ä–∏–π
  const [isDirty, setIsDirty] = useState<boolean>(false);
  const [changed, setChanged] = useState<Record<string, LayoutBlock>>({});
  const [saving, setSaving] = useState<boolean>(false);
  const [saveError, setSaveError] = useState<string | null>(null);
  const [publishing, setPublishing] = useState<boolean>(false);

  // Onboarding tutorial
  const [showTutorial, setShowTutorial] = useState<boolean>(() => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—É—Ç–æ—Ä–∏–∞–ª —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    const hasSeenTutorial = localStorage.getItem('hasSeenTutorial');
    return !hasSeenTutorial;
  });
  
  // Templates - temporarily disabled
  // const [templates, setTemplates] = useState<PageTemplate[]>([]);
  // const [templatesLoading, setTemplatesLoading] = useState<boolean>(false);
  // const [applyingTemplate, setApplyingTemplate] = useState<boolean>(false);
  
  // Revisions
  const [revisions, setRevisions] = useState<Array<{ id: string; created_at: string }>>([]);
  const [revisionsLoading, setRevisionsLoading] = useState<boolean>(false);
  const [reverting, setReverting] = useState<boolean>(false);

  // Pages navigation
  const [pages, setPages] = useState<PageRow[]>([]);
  const [pagesLoading, setPagesLoading] = useState<boolean>(false);

  // Undo/Redo history stacks for blockTree snapshots
  const [historyPast, setHistoryPast] = useState<BlockNode[][]>(() => getInitialHistory('editorHistoryPast'));
  const [historyFuture, setHistoryFuture] = useState<BlockNode[][]>(() => getInitialHistory('editorHistoryFuture'));
  const HISTORY_LIMIT = 50;

  const deepCloneTree = (tree: BlockNode[]): BlockNode[] => JSON.parse(JSON.stringify(tree)) as BlockNode[];

  // Tutorial handlers
  const handleTutorialComplete = () => {
    setShowTutorial(false);
    localStorage.setItem('hasSeenTutorial', 'true');
  };

  const handleTutorialSkip = () => {
    setShowTutorial(false);
    localStorage.setItem('hasSeenTutorial', 'true');
  };
  const pushHistoryBeforeChange = () => {
    setHistoryPast(prev => {
      const next = [...prev, deepCloneTree(blockTree)];
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ HISTORY_LIMIT —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
      return next.length > HISTORY_LIMIT ? next.slice(next.length - HISTORY_LIMIT) : next;
    });
    // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º redo –ø–æ—Å–ª–µ –Ω–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    setHistoryFuture([]);
  };

  const handleUndo = () => {
    if (historyPast.length === 0) return;
    const prev = historyPast[historyPast.length - 1];
    const rest = historyPast.slice(0, -1);
    // –¢–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±—É–¥—É—â–µ–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ redo (—Ç–∞–∫–∂–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—ä–µ–º)
    setHistoryPast(rest);
    setHistoryFuture(f => {
      const nf = [deepCloneTree(blockTree), ...f];
      return nf.length > HISTORY_LIMIT ? nf.slice(0, HISTORY_LIMIT) : nf;
    });
    dispatch(setLayoutFromApi({ pageId: 1, blocks: deepCloneTree(prev) }));
    setIsDirty(true);
  };

  const handleRedo = () => {
    if (historyFuture.length === 0) return;
    const [next, ...rest] = historyFuture;
    setHistoryFuture(rest);
    setHistoryPast(p => {
      const np = [...p, deepCloneTree(blockTree)];
      return np.length > HISTORY_LIMIT ? np.slice(np.length - HISTORY_LIMIT) : np;
    });
    dispatch(setLayoutFromApi({ pageId: 1, blocks: deepCloneTree(next) }));
    setIsDirty(true);
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ localStorage –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    try {
      window.localStorage.setItem('editorHistoryPast', JSON.stringify(historyPast));
      window.localStorage.setItem('editorHistoryFuture', JSON.stringify(historyFuture));
    } catch (error) {
      console.error('Failed to save history to localStorage:', error);
    }
  }, [historyPast, historyFuture]);

  // DnD sensors —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 8, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ drag
      },
    }),
    useSensor(KeyboardSensor, {
      coordinateGetter: (event, args) => {
        // –î–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ
        const { currentCoordinates } = args;
        return {
          x: currentCoordinates.x,
          y: currentCoordinates.y,
        };
      },
    })
  );

  // –¢—Ä–µ–∫–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è Shift –∏ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è Undo/Redo
  useEffect(() => {
    const down = (e: KeyboardEvent) => {
      if (e.key === 'Shift') setIsShiftPressed(true);

      // Undo: Ctrl+Z –∏–ª–∏ Cmd+Z
      if ((e.ctrlKey || e.metaKey) && e.key === 'z' && !e.shiftKey) {
        e.preventDefault();
        handleUndo();
      }

      // Redo: Ctrl+Y –∏–ª–∏ Ctrl+Shift+Z –∏–ª–∏ Cmd+Y –∏–ª–∏ Cmd+Shift+Z
      if ((e.ctrlKey || e.metaKey) &&
          ((e.key === 'y') || (e.key === 'z' && e.shiftKey))) {
        e.preventDefault();
        handleRedo();
      }
    };

    const up = (e: KeyboardEvent) => {
      if (e.key === 'Shift') setIsShiftPressed(false);
    };

    window.addEventListener('keydown', down);
    window.addEventListener('keyup', up);

    return () => {
      window.removeEventListener('keydown', down);
      window.removeEventListener('keyup', up);
    };
  }, [handleUndo, handleRedo]);

  // Load blocks using Redux
  useEffect(() => {
    let isMounted = true;
    // –°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    setHistoryPast([]);
    setHistoryFuture([]);
    setChanged({});
    setIsDirty(false);
    setSelectedBlockId(null);

    const load = async () => {
      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å API
        const data = await fetchAdminLayoutByPage(currentPageSlug);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–ª–æ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ –≤ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        const treeData = buildTreeFromBlocks(data);

        if (!isMounted) return;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redux
        dispatch(setLayoutFromApi({
          pageId: 1, // TODO: –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π pageId
          blocks: treeData
        }));

        setSelectedBlockId((prev) => (treeData.some((b) => b.id === prev) ? prev : null));
      } catch (e: unknown) {
        if (!isMounted) return;
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–ª–æ–∫–∏:', e);
        // TODO: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ Redux
      }
    };
    void load();
    return () => {
      isMounted = false;
    };
  }, [currentPageSlug, dispatch]);

  // Helper function to convert flat blocks to tree structure
  const buildTreeFromBlocks = (flatBlocks: LayoutBlock[]): BlockNode[] => {
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –≤—Å–µ —É–∑–ª—ã
    const blockMap = new Map<string, BlockNode>();
    const rootBlocks: BlockNode[] = [];

    flatBlocks.forEach(block => {
      const node: BlockNode = {
        id: block.id,
        block_type: block.block_type,
        content: (block.content as Record<string, any>) || null,
        depth: 0,
        instance_id: block.instance_id,
        metadata: (block.metadata as Record<string, any>) || {},
        page_id: block.page_id,
        position: block.position,
        slot: block.slot,
        status: block.status,
        children: []
      };
      blockMap.set(block.id, node);
    });

    // –ó–∞—Ç–µ–º —Å—Ç—Ä–æ–∏–º –∏–µ—Ä–∞—Ä—Ö–∏—é
    flatBlocks.forEach(block => {
      const node = blockMap.get(block.id)!;
      const parentId = block.parent_block_id;

      if (parentId && blockMap.has(parentId)) {
        const parent = blockMap.get(parentId)!;
        parent.children.push(node);
      } else {
        rootBlocks.push(node);
      }
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏
    function sortChildren(nodes: BlockNode[]): void {
      nodes.forEach(node => {
        if (node.children.length > 0) {
          node.children.sort((a: BlockNode, b: BlockNode) => (a.position || 0) - (b.position || 0));
          sortChildren(node.children);
        }
      });
    }

    sortChildren(rootBlocks);
    return rootBlocks;
  };

  // Load pages for navigation
  useEffect(() => {
    let isMounted = true;
    const loadPages = async () => {
      try {
        setPagesLoading(true);
        const data = await fetchAdminPages();
        if (!isMounted) return;
        setPages(data);
      } catch (e: unknown) {
        // Silently handle pages loading error - navigation can still work without it
        console.warn('Failed to load pages for navigation:', e);
      } finally {
        if (!isMounted) return;
        setPagesLoading(false);
      }
    };
    void loadPages();
    return () => {
      isMounted = false;
    };
  }, []);

  // Handle page change


  // Load templates - temporarily disabled
  // useEffect(() => {
  //   let mounted = true;
  //   (async () => {
  //     try {
  //       setTemplatesLoading(true);
  //       const list = await fetchTemplates();
  //       if (!mounted) return;
  //       setTemplates(list);
  //     } catch {
  //       console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω—ã');
  //     } finally {
  //       if (!mounted) return;
  //       setTemplatesLoading(false);
  //     }
  //   })();
  //   return () => { mounted = false; };
  // }, []);

  // Load revisions
  useEffect(() => {
    let mounted = true;
    (async () => {
      try {
        setRevisionsLoading(true);
        const list = await fetchLayoutRevisions(currentPageSlug);
        if (!mounted) return;
        setRevisions(list.map((r) => ({ id: r.id, created_at: r.created_at })));
      } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–≤–∏–∑–∏–∏:', error);
        if (!mounted) return;
        setRevisions([]);
      } finally {
        if (!mounted) return;
        setRevisionsLoading(false);
      }
    })();
    return () => { mounted = false; };
  }, [currentPageSlug]);

  const handleDragStart = useCallback((event: DragStartEvent) => {
    const { active } = event;
    const activeId = String(active.id ?? '');

    // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –±–ª–æ–∫ –¥–ª—è DragOverlay
    if (activeId.startsWith('canvas-block:')) {
      const blockId = activeId.substring('canvas-block:'.length);
      const block = findBlockInTree(blockTree, blockId);
      if (block) setActiveBlock(block);
    } else if (activeId.startsWith('block-type:')) {
      // –î–ª—è –Ω–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const type = activeId.substring('block-type:'.length);
      const spec = blockRegistry[type];
      if (spec) {
        setActiveBlock({
          id: 'temp-block',
          block_type: type,
          content: {},
          depth: 0,
          instance_id: null,
          metadata: {},
          page_id: 1,
          position: 0,
          slot: null,
          status: 'draft',
          children: []
        });
      }
    }
  }, [blockTree]);

  const findBlockInTree = (nodes: BlockNode[], blockId: string): BlockNode | null => {
    for (const node of nodes) {
      if (node.id === blockId) return node;
      if (node.children && node.children.length > 0) {
        const found = findBlockInTree(node.children, blockId);
        if (found) return found;
      }
    }
    return null;
  };

  const selectedBlock = React.useMemo(() =>
    selectedBlockId ? findBlockInTree(blockTree, selectedBlockId) : null,
    [selectedBlockId, blockTree]
  );

  const handleSelectBlock = (id: string | null) => {
    console.log('üéØ SELECT: Block selected, ID:', id, 'shift:', isShiftPressed);
    if (!id) {
      setSelectedBlockId(null);
      setSelectedBlockIds([]);
      return;
    }
    if (isShiftPressed) {
      // Toggle –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è Shift+–∫–ª–∏–∫
      setSelectedBlockIds(prev => {
        const exists = prev.includes(id);
        const next = exists ? prev.filter(x => x !== id) : [...prev, id];
        // –í—ã—Å—Ç–∞–≤–ª—è–µ–º single-selected –¥–ª—è –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω
        setSelectedBlockId(next.length === 1 ? next[0] : null);
        return next;
      });
    } else {
      setSelectedBlockIds([id]);
      setSelectedBlockId(id);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –Ω–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
      const activeElement = document.activeElement;
      const isInputFocused = activeElement instanceof HTMLInputElement ||
                           activeElement instanceof HTMLTextAreaElement ||
                           activeElement instanceof HTMLSelectElement ||
                           (activeElement as HTMLElement)?.contentEditable === 'true';
      if (isInputFocused) return;

      // Ctrl/Cmd + S ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
      if ((e.ctrlKey || e.metaKey) && e.key.toLowerCase() === 's') {
        e.preventDefault();
        void handleSave();
        return;
      }

      // Ctrl/Cmd + Z ‚Äî undo
      if ((e.ctrlKey || e.metaKey) && e.key.toLowerCase() === 'z' && !e.shiftKey) {
        e.preventDefault();
        handleUndo();
        return;
      }

      // Ctrl/Cmd + Shift + Z –∏–ª–∏ Ctrl/Cmd + Y ‚Äî redo
      if ((e.ctrlKey || e.metaKey) && (e.key.toLowerCase() === 'y' || (e.key.toLowerCase() === 'z' && e.shiftKey))) {
        e.preventDefault();
        handleRedo();
        return;
      }

      // Delete ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏
      if (e.key === 'Delete' && selectedBlockIds.length > 0) {
        e.preventDefault();
        const confirmed = window.confirm(`–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏ (${selectedBlockIds.length} —à—Ç.)? –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.`);
        if (confirmed) void handleDeleteSelected();
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–µ–ª–æ–∫ (–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
      if (!selectedBlockId) return;
      if (e.key === 'ArrowLeft') {
        e.preventDefault();
        moveBlockLeft(selectedBlockId);
      } else if (e.key === 'ArrowRight') {
        e.preventDefault();
        moveBlockRight(selectedBlockId);
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [selectedBlockId, selectedBlockIds, blockTree]);

  const handleBlockChange = (updatedBlock: LayoutBlock) => {
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫ –≤ Redux store
    dispatch(updateBlockInTree({
      blockId: updatedBlock.id,
      updates: {
        content: (updatedBlock.content as Record<string, any>) || {},
        metadata: (updatedBlock.metadata as Record<string, any>) || {}
      }
    }));

    setChanged((prev) => ({ ...prev, [updatedBlock.id]: updatedBlock }));
    setIsDirty(true);
  };

  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –±–ª–æ–∫–∞ –≤–ª–µ–≤–æ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Redux)
  const moveBlockLeft = async (blockId: string) => {
    // –î–ª—è Redux –≤–µ—Ä—Å–∏–∏ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ tree operations
    // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
    console.log('Move block left:', blockId);
  };

  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –±–ª–æ–∫–∞ –≤–ø—Ä–∞–≤–æ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Redux)
  const moveBlockRight = async (blockId: string) => {
    // –î–ª—è Redux –≤–µ—Ä—Å–∏–∏ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ tree operations
    // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
    console.log('Move block right:', blockId);
  };

  const handleAddBlockOfType = async (type: string) => {
    console.log('üèóÔ∏è EDITOR: handleAddBlockOfType called with type:', type);
    const spec = blockRegistry[type];
    if (!spec) {
      console.error('‚ùå EDITOR: Block spec not found for type:', type);
      return;
    }

    try {
      setAdding(true);
      console.log('üèóÔ∏è EDITOR: Creating block...');

      // –°–Ω–∏–º–æ–∫ –¥–ª—è undo
      pushHistoryBeforeChange();

      // –ù–∞—Ö–æ–¥–∏–º ID —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const currentPage = pages.find(page => page.slug === currentPageSlug);
      const pageId = currentPage?.id || 1; // Fallback –Ω–∞ 1 –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞

      console.log('üèóÔ∏è EDITOR: Using page ID:', pageId, 'for page slug:', currentPageSlug);

      // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const newBlockData = await createLayoutBlock({
        block_type: type,
        content: spec.defaultData ? spec.defaultData() : {},
        metadata: {},
        page_id: pageId,
        position: blockTree.length,
        status: 'draft'
      });

      console.log('‚úÖ EDITOR: Block created in database with ID:', newBlockData.id);

      // –°–æ–∑–¥–∞–µ–º BlockNode –¥–ª—è Redux —Å —Ä–µ–∞–ª—å–Ω—ã–º ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const newBlockNode: BlockNode = {
        id: newBlockData.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        block_type: type,
        content: (newBlockData.content as Record<string, any>) || {},
        depth: 0,
        instance_id: newBlockData.instance_id,
        metadata: (newBlockData.metadata as Record<string, any>) || {},
        page_id: newBlockData.page_id,
        position: newBlockData.position,
        slot: newBlockData.slot,
        status: newBlockData.status,
        children: []
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ Redux –¥–µ—Ä–µ–≤–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º ID
      dispatch(addBlockToTree({
        block: newBlockNode,
        parentId: null,
        position: blockTree.length
      }));

      setSelectedBlockId(newBlockNode.id);
      console.log('‚úÖ EDITOR: Block added to Redux tree with persistent ID');
    } catch (e) {
      console.error('‚ùå EDITOR: Failed to create block:', e);
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å–Ω–∏–º–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      if (historyPast.length > 0) {
        const prev = historyPast[historyPast.length - 1];
        dispatch(setLayoutFromApi({ pageId: 1, blocks: deepCloneTree(prev) }));
      }
    } finally {
      setAdding(false);
    }
  };

  const handleSave = async () => {
    try {
      setSaving(true);
      setSaveError(null);

      // 1) –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –±–ª–æ–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö —É–∑–ª–æ–≤ –¥–µ—Ä–µ–≤–∞
      const positionUpdates: Array<{ id: string; position: number }> = [];
      const collectPositions = (nodes: BlockNode[]) => {
        nodes.forEach((node, index) => {
          // –ø–æ–∑–∏—Ü–∏—è —Å—á–∏—Ç–∞–µ–º 1-–±–∞–∑–Ω–æ–π –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å API
          positionUpdates.push({ id: node.id, position: index + 1 });
          if (node.children && node.children.length > 0) {
            collectPositions(node.children);
          }
        });
      };
      // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ (–ø–æ –∫–∞–∂–¥–æ–º—É –∫–æ—Ä–Ω–µ–≤–æ–º—É —Å–ø–∏—Å–∫—É ‚Äî —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏, –Ω–æ API –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ id+position)
      blockTree.forEach((root, rootIndex) => {
        positionUpdates.push({ id: root.id, position: rootIndex + 1 });
        if (root.children && root.children.length > 0) collectPositions(root.children);
      });

      if (positionUpdates.length > 0) {
        await updateLayoutPositions(positionUpdates);
      }

      // 2) –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ (–∫–æ–Ω—Ç–µ–Ω—Ç/–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ/—Å—Ç–∞—Ç—É—Å)
      const changedBlocks = Object.values(changed);
      if (changedBlocks.length > 0) {
        await Promise.all(
          changedBlocks.map((blk) =>
            updateLayoutBlock(blk.id, {
              // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—è
              content: blk.content as any,
              metadata: blk.metadata as any,
              status: blk.status as any,
              slot: blk.slot as any,
            })
          )
        );
      }

      setIsDirty(false);
      setChanged({});
    } catch (e: unknown) {
      const message = e instanceof Error ? e.message : '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
      setSaveError(message);
      console.error('SAVE ERROR:', e);
    } finally {
      setSaving(false);
    }
  };

  const handleCancel = async () => {
    try {
      setLoading(true);
      setError(null);
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
      const data = await fetchAdminLayoutByPage(currentPageSlug);
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –¥–µ—Ä–µ–≤–æ –¥–ª—è Redux (–ø–æ–∫–∞ –±–µ–∑ buildTreeFromBlocks)
      const treeData = data.map(block => ({
        id: block.id,
        block_type: block.block_type,
        content: (block.content as Record<string, any>) || {},
        depth: 0,
        instance_id: block.instance_id,
        metadata: (block.metadata as Record<string, any>) || {},
        page_id: block.page_id,
        position: block.position,
        slot: block.slot,
        status: block.status,
        children: []
      }));

      // –û–±–Ω–æ–≤–ª—è–µ–º Redux —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      dispatch(setLayoutFromApi({
        pageId: 1,
        blocks: treeData
      }));

      setSelectedBlockId(null);
      setSelectedBlockIds([]);
      setChanged({});
      setIsDirty(false);
    } catch (e: unknown) {
      const message = e instanceof Error ? e.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–ª–æ–∫–∏';
      setError(message);
    } finally {
      setLoading(false);
    }
  };

  const handleCreateRevision = async () => {
    try {
      await createLayoutRevision(currentPageSlug);
      const list = await fetchLayoutRevisions(currentPageSlug);
      setRevisions(list.map((r) => ({ id: r.id, created_at: r.created_at })));
    } catch (e) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–≤–∏–∑–∏—é:', e);
    }
  };

  const handleRevertRevision = async (revisionId: string) => {
    try {
      setReverting(true);
      await revertToLayoutRevision(currentPageSlug, revisionId);
      const data = await fetchAdminLayoutByPage(currentPageSlug);
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –¥–µ—Ä–µ–≤–æ –¥–ª—è Redux (–ø–æ–∫–∞ –±–µ–∑ buildTreeFromBlocks)
      const treeData = data.map(block => ({
        id: block.id,
        block_type: block.block_type,
        content: (block.content as Record<string, any>) || {},
        depth: 0,
        instance_id: block.instance_id,
        metadata: (block.metadata as Record<string, any>) || {},
        page_id: block.page_id,
        position: block.position,
        slot: block.slot,
        status: block.status,
        children: []
      }));

      // –û–±–Ω–æ–≤–ª—è–µ–º Redux —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      dispatch(setLayoutFromApi({
        pageId: 1,
        blocks: treeData
      }));

      setSelectedBlockId(null);
    } catch (e) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–∞—Ç–∏—Ç—å —Ä–µ–≤–∏–∑–∏—é:', e);
    } finally {
      setReverting(false);
    }
  };



  const handlePublishToggle = async (blockId: string) => {
    // –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–∫ –≤ –¥–µ—Ä–µ–≤–µ
    const blockToUpdate = findBlockInTree(blockTree, blockId);
    if (!blockToUpdate) return;

    const isPublished = blockToUpdate.status === 'published';
    const nextStatus = isPublished ? 'draft' : 'published';

    try {
      setPublishing(true);
      // –°–Ω–∏–º–æ–∫ –¥–ª—è undo
      pushHistoryBeforeChange();

      // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Redux
      dispatch(updateBlockInTree({
        blockId,
        updates: { status: nextStatus }
      }));

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º
      await updateLayoutBlock(blockId, { status: nextStatus as any });
    } catch (err) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', err);
    } finally {
      setPublishing(false);
    }
  };

  const handleDeleteBlock = async (blockId: string) => {
    try {
      const ok = window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–ª–æ–∫ –∏ –≤—Å–µ –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.');
      if (!ok) return;
      pushHistoryBeforeChange();
      await deleteLayoutBlock(blockId);
      dispatch(removeBlockFromTree(blockId));
      if (selectedBlockId === blockId) {
        setSelectedBlockId(null);
      }
      setSelectedBlockIds(prev => prev.filter(id => id !== blockId));
      setChanged((prevChanged) => {
        const updated = { ...prevChanged };
        delete updated[blockId];
        return updated;
      });
      setIsDirty(true);
    } catch (error) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–ª–æ–∫:', error);
    }
  };

  const handleDeleteSelected = async () => {
    if (selectedBlockIds.length === 0) return;
    try {
      pushHistoryBeforeChange();
      // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å API
      for (const id of selectedBlockIds) {
        try {
          await deleteLayoutBlock(id);
        } catch (e) {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–ª–æ–∫:', id, e);
        }
        dispatch(removeBlockFromTree(id));
        setChanged(prev => {
          const copy = { ...prev } as Record<string, LayoutBlock>;
          delete copy[id];
          return copy;
        });
      }
      setSelectedBlockIds([]);
      setSelectedBlockId(null);
      setIsDirty(true);
    } catch (e) {
      console.error('–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', e);
    }
  };

  const handleGroupSelectedIntoContainer = async () => {
    if (selectedBlockIds.length < 2) return;
    try {
      pushHistoryBeforeChange();
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –∫–æ—Ä–Ω–µ
      const payload: TablesInsert<'layout_blocks'> = {
        block_type: 'container_section',
        content: { layout: 'vertical', gap: 'medium', padding: 'medium' } as any,
        metadata: {},
        page_id: 1,
        position: blockTree.length + 1,
        parent_block_id: null,
        slot: null,
        status: 'draft'
      };
      const container = await createLayoutBlock(payload);

      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –≤–Ω—É—Ç—Ä—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
      let pos = 1;
      for (const id of selectedBlockIds) {
        dispatch(moveBlockInTree({ blockId: id, newParentId: container.id, newPosition: pos - 1 }));
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
        try {
          await updateLayoutBlock(id, { parent_block_id: container.id, position: pos } as any);
        } catch (e) {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –±–ª–æ–∫–∞:', id, e);
        }
        pos += 1;
      }

      // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      setSelectedBlockIds([container.id]);
      setSelectedBlockId(container.id);
      setIsDirty(true);
    } catch (e) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:', e);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –≤–Ω–µ –±–ª–æ–∫–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞
  const handleCanvasClick = (e: React.MouseEvent<HTMLDivElement>) => {
    console.log('NewLiveEditor: Canvas clicked');
    const target = e.target as HTMLElement;
    const blockElement = target.closest('[data-block-id]');
    console.log('NewLiveEditor: Canvas click target:', target, 'blockElement:', blockElement);
    if (!blockElement) {
      console.log('NewLiveEditor: Deselecting blocks');
      setSelectedBlockId(null);
      setSelectedBlockIds([]);
    }
  };

  const handleDndEnd = async (event: DragEndEvent) => {
    const { active, over } = event;

    if (!over) {
      console.log('‚ùå DnD: No drop target');
      return;
    }

    const activeId = String(active.id ?? '');
    const overId = String(over.id ?? '');

    console.log('üéØ DnD: Drag end event:', { activeId, overId });

    // === –°–õ–£–ß–ê–ô 1: –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ===
    if (activeId.startsWith('block-type:')) {
      await handleNewBlockDrop(activeId, overId);
      return;
    }

    // === –°–õ–£–ß–ê–ô 2: –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –±–ª–æ–∫–∞ ===
    if (activeId.startsWith('reusable-')) {
      await handleReusableBlockDrop(activeId, overId);
      return;
    }

    // === –°–õ–£–ß–ê–ô 3: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–ª–æ–∫–∞ ===
    if (activeId.startsWith('canvas-block:')) {
      await handleExistingBlockMove(activeId, overId);
      return;
    }

    console.log('‚ùå DnD: Unknown drag source:', activeId);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä–æ–ø–∞ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
  const handleNewBlockDrop = async (activeId: string, overId: string) => {
    const blockType = activeId.substring('block-type:'.length);
    console.log('üÜï DnD: Creating new block from library:', blockType);

    if (overId.startsWith('dropzone-')) {
      await handleNewBlockInDropZone(blockType, overId);
    } else {
      // –°–æ–∑–¥–∞–Ω–∏–µ –≤ –∫–æ—Ä–Ω–µ, –µ—Å–ª–∏ –Ω–µ—Ç —Ü–µ–ª–∏
      await handleAddBlockOfType(blockType);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä–æ–ø–∞ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –±–ª–æ–∫–∞
  const handleReusableBlockDrop = async (activeId: string, overId: string) => {
    const reusableBlockId = activeId.substring('reusable-'.length);
    console.log('üîÑ REUSABLE: Dropping reusable block:', reusableBlockId);

    if (overId.startsWith('dropzone-')) {
      await handleReusableBlockInDropZone(reusableBlockId, overId);
    } else {
      // –°–æ–∑–¥–∞–Ω–∏–µ –≤ –∫–æ—Ä–Ω–µ
      await handleReusableBlockAtRoot(reusableBlockId);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–ª–æ–∫–∞
  const handleExistingBlockMove = async (activeId: string, overId: string) => {
    const blockId = activeId.substring('canvas-block:'.length);
    console.log('üì¶ DnD: Moving existing block:', blockId);

    if (overId.startsWith('dropzone-')) {
      await handleExistingBlockToDropZone(blockId, overId);
    } else if (overId.startsWith('canvas-block:')) {
      await handleExistingBlockToBlock(blockId, overId);
    } else if (overId === 'canvas-dropzone') {
      await handleExistingBlockToCanvas(blockId);
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –≤ DropZone
  const handleNewBlockInDropZone = async (blockType: string, overId: string) => {
    const dropZoneMatch = overId.match(/^dropzone-(.+)-(\d+)-(.+)$/);
    if (!dropZoneMatch) {
      console.log('‚ùå DnD: Invalid dropzone format:', overId);
      return;
    }

    const [, parentIdRaw, positionStr, slotName] = dropZoneMatch;
    const parentId = parentIdRaw === 'root' ? undefined : parentIdRaw;
    const position = Number(positionStr);

    console.log('üéØ DnD: Creating new block in dropzone:', { blockType, parentId, position, slotName });

    try {
      setAdding(true);

      // –°–Ω–∏–º–æ–∫ –¥–ª—è undo
      pushHistoryBeforeChange();

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫
      const payload: TablesInsert<'layout_blocks'> = {
        block_type: blockType,
        content: {},
        metadata: {},
        page_id: 1, // TODO: –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π pageId
        position: position + 1,
        parent_block_id: parentId,
        slot: slotName,
        status: 'published'
      };

      const created = await createLayoutBlock(payload);

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ Redux –¥–µ—Ä–µ–≤–æ
      const newBlockNode: BlockNode = {
        id: created.id,
        block_type: created.block_type,
        content: (created.content as Record<string, any>) || null,
        depth: 0,
        instance_id: created.instance_id,
        metadata: (created.metadata as Record<string, any>) || {},
        page_id: created.page_id,
        position: created.position,
        slot: created.slot,
        status: created.status,
        children: []
      };

      dispatch(addBlockToTree({
        block: newBlockNode,
        parentId: parentId || null,
        position
      }));

      setSelectedBlockId(created.id);
      console.log('‚úÖ DnD: New block created successfully in dropzone');
    } catch (error) {
      console.error('‚ùå DnD: Failed to create block in dropzone:', error);
    } finally {
      setAdding(false);
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –±–ª–æ–∫–∞ –≤ DropZone
  const handleReusableBlockInDropZone = async (reusableBlockId: string, overId: string) => {
    const dropZoneMatch = overId.match(/^dropzone-(.+)-(\d+)-(.+)$/);
    if (!dropZoneMatch) {
      console.log('‚ùå DnD: Invalid dropzone format:', overId);
      return;
    }

    const [, parentIdRaw, positionStr, slotName] = dropZoneMatch;
    const parentId = parentIdRaw === 'root' ? undefined : parentIdRaw;
    const position = Number(positionStr);

    console.log('üîÑ REUSABLE: Creating instance in dropzone:', { reusableBlockId, parentId, position, slotName });

    try {
      const newInstanceTree = await dispatch(instantiateReusableBlock({
        reusableBlockId,
        pageId: currentPageSlug,
        parentId,
        position: position + 1,
        slot: slotName,
      })).unwrap();

      if (newInstanceTree) {
        // –°–Ω–∏–º–æ–∫ –¥–ª—è undo
        pushHistoryBeforeChange();
        dispatch(addBlockToTree(newInstanceTree));
        console.log('‚úÖ REUSABLE: Block instantiated successfully in dropzone');

        // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –±–ª–æ–∫ –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
        if (newInstanceTree.children && newInstanceTree.children.length > 0) {
          setSelectedBlockId(newInstanceTree.children[0].id);
        } else {
          setSelectedBlockId(newInstanceTree.id);
        }
      }
    } catch (error) {
      console.error('‚ùå REUSABLE: Failed to instantiate block in dropzone:', error);
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –±–ª–æ–∫–∞ –≤ –∫–æ—Ä–Ω–µ
  const handleReusableBlockAtRoot = async (reusableBlockId: string) => {
    console.log('üîÑ REUSABLE: Creating instance at root:', reusableBlockId);

    try {
      const newInstanceTree = await dispatch(instantiateReusableBlock({
        reusableBlockId,
        pageId: currentPageSlug,
        parentId: undefined,
        position: blockTree.length,
        slot: undefined,
      })).unwrap();

      if (newInstanceTree) {
        // –°–Ω–∏–º–æ–∫ –¥–ª—è undo
        pushHistoryBeforeChange();
        dispatch(addBlockToTree(newInstanceTree));
        console.log('‚úÖ REUSABLE: Block instantiated successfully at root');
      }
    } catch (error) {
      console.error('‚ùå REUSABLE: Failed to instantiate block at root:', error);
    }
  };

  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–ª–æ–∫–∞ –≤ DropZone
  const handleExistingBlockToDropZone = async (blockId: string, overId: string) => {
    const dropZoneMatch = overId.match(/^dropzone-(.+)-(\d+)-(.+)$/);
    if (!dropZoneMatch) {
      console.log('‚ùå DnD: Invalid dropzone format:', overId);
      return;
    }

    const [, parentIdRaw, positionStr, slotName] = dropZoneMatch;
    const newParentId = parentIdRaw === 'root' ? null : parentIdRaw;
    const newPosition = Number(positionStr);

    console.log('üì¶ DnD: Moving existing block to dropzone:', { blockId, newParentId, newPosition, slotName });

    // –°–Ω–∏–º–æ–∫ –¥–ª—è undo
    pushHistoryBeforeChange();

    // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    dispatch(moveBlockInTree({
      blockId,
      newParentId,
      newPosition
    }));

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    try {
      console.log('üì° DnD: Updating block on server:', {
        blockId,
        parent_block_id: newParentId,
        position: newPosition + 1,
        slot: slotName
      });

      const updatedBlock = await updateLayoutBlock(blockId, {
        parent_block_id: newParentId,
        position: newPosition + 1,
        slot: slotName
      });

      console.log('‚úÖ DnD: Block moved successfully:', {
        blockId,
        newParentId: updatedBlock.parent_block_id,
        newPosition: updatedBlock.position,
        slot: updatedBlock.slot
      });

      setIsDirty(true);
    } catch (error) {
      console.error('‚ùå DnD: Failed to move block:', error);

      // –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
      const prevState = historyPast[historyPast.length - 1];
      if (prevState) {
        console.log('üîÑ DnD: Rolling back UI changes');
        dispatch(setLayoutFromApi({
          pageId: 1,
          blocks: deepCloneTree(prevState)
        }));
        setHistoryPast(prev => prev.slice(0, -1));
      }

      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –±–ª–æ–∫. –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.');
    }
  };

  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –±–ª–æ–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–π –±–ª–æ–∫ (–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å)
  const handleExistingBlockToBlock = async (blockId: string, overId: string) => {
    const targetBlockId = overId.substring('canvas-block:'.length);
    console.log('üì¶ DnD: Moving block onto another block:', { blockId, targetBlockId });

    // –ù–∞—Ö–æ–¥–∏–º target –±–ª–æ–∫
    const targetBlock = findBlockInTree(blockTree, targetBlockId);
    if (!targetBlock) {
      console.error('‚ùå DnD: Target block not found:', targetBlockId);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ target –±–ª–æ–∫ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–æ—á–µ—Ä–Ω–∏–µ –±–ª–æ–∫–∏
    const blockSpec = blockRegistry[targetBlock.block_type];
    if (!blockSpec?.allowedChildren || blockSpec.allowedChildren.length === 0) {
      console.log('‚ùå DnD: Target block cannot have children:', targetBlock.block_type);
      return;
    }

    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –±–ª–æ–∫ –∫–∞–∫ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ target –±–ª–æ–∫–∞
    await handleExistingBlockToDropZone(blockId, `dropzone-${targetBlockId}-0-default`);
  };

  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –±–ª–æ–∫–∞ –Ω–∞ –∫–∞–Ω–≤–∞—Å (–≤ –∫–æ—Ä–µ–Ω—å)
  const handleExistingBlockToCanvas = async (blockId: string) => {
    console.log('üì¶ DnD: Moving block to canvas root:', blockId);

    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∫–æ–Ω–µ—Ü –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    await handleExistingBlockToDropZone(blockId, `dropzone-root-${blockTree.length}-default`);
  };








  return (
    <DndContext
      sensors={sensors}
      onDragEnd={handleDndEnd}
      onDragStart={handleDragStart}
      collisionDetection={pointerWithin}
    >
      <div className="h-screen flex flex-col">
        {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å */}
        <EditorToolbar
          pageIdentifier={currentPageSlug}
          isDirty={isDirty}
          saving={saving}
          saveError={saveError}
          onSave={handleSave}
          onCancel={handleCancel}
          onAddBlock={handleAddBlockOfType}
          adding={adding}
          revisions={revisions}
          revisionsLoading={revisionsLoading}
          reverting={reverting}
          onCreateRevision={handleCreateRevision}
          onRevertRevision={handleRevertRevision}
          pages={pages}
          pagesLoading={pagesLoading}
          onOpenBlockLibrary={() => setSidebarActiveView('BLOCK_LIBRARY')}
          onOpenReusableLibrary={() => setSidebarActiveView('REUSABLE_LIBRARY')}
          onUndo={handleUndo}
          onRedo={handleRedo}
          canUndo={historyPast.length > 0}
          canRedo={historyFuture.length > 0}
        />

        {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –ø—Ä–µ–≤—å—é */}
        <div className="flex-1 flex overflow-hidden">
          <main
            className="flex-1 overflow-y-auto pr-96"
            data-tutorial="canvas"
          >
            <div className="p-6" onClick={handleCanvasClick}>
              {loading ? (
                <div className="flex justify-center items-center h-64">
                  <Spinner />
                </div>
              ) : error ? (
                <Card className="p-6 text-center">
                  <div className="text-red-600 dark:text-red-400">
                    –û—à–∏–±–∫–∞: {error}
                  </div>
                </Card>
              ) : (
                <div
                  ref={setCanvasRef}
                  className={`
                    min-h-full p-4 transition-colors duration-200
                    ${isCanvasOver
                      ? 'bg-blue-50 dark:bg-blue-900/20 border-2 border-dashed border-blue-400 rounded-lg'
                      : 'border-2 border-transparent'
                    }
                  `}
                >
                  {/* –ü–∞–Ω–µ–ª—å –≥—Ä—É–ø–ø–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –≤—ã–¥–µ–ª–µ–Ω–∏–∏ */}
                  {selectedBlockIds.length > 1 && (
                    <div className="sticky top-2 z-20 mb-3 inline-flex items-center gap-2 bg-white/90 dark:bg-gray-900/80 border border-gray-200 dark:border-gray-700 rounded-md shadow px-3 py-2">
                      <span className="text-sm text-gray-700 dark:text-gray-200">–í—ã–±—Ä–∞–Ω–æ: {selectedBlockIds.length}</span>
                      <button
                        className="text-sm px-2 py-1 bg-red-600 hover:bg-red-700 text-white rounded"
                        onClick={() => {
                          const confirmed = window.confirm(`–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏ (${selectedBlockIds.length} —à—Ç.)?`);
                          if (confirmed) void handleDeleteSelected();
                        }}
                      >
                        –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
                      </button>
                      <button
                        className="text-sm px-2 py-1 bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 rounded"
                        onClick={() => void handleGroupSelectedIntoContainer()}
                      >
                        –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                      </button>
                    </div>
                  )}

                  {blockTree.length === 0 && !isCanvasOver ? (
                    <div className="flex items-center justify-center h-64 text-center text-gray-500 dark:text-gray-400">
                      <div>
                        <div className="text-4xl mb-4">üìÑ</div>
                        <h3 className="text-lg font-medium mb-2">–ü—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</h3>
                        <p className="text-sm">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –±–ª–æ–∫–∏ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫"</p>
                      </div>
                    </div>
                  ) : (
                    <VirtualizedCanvas
                      blockTree={blockTree}
                      editorMode
                      selectedBlockId={selectedBlockId ?? undefined}
                      onSelectBlock={handleSelectBlock}
                      onUpdateBlock={(updated) => {
                        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BlockNode –æ–±—Ä–∞—Ç–Ω–æ –≤ LayoutBlock –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        const layoutBlock: LayoutBlock = {
                          id: updated.id,
                          block_type: updated.block_type,
                          content: updated.content || {},
                          metadata: updated.metadata,
                          page_id: updated.page_id,
                          position: updated.position,
                          slot: updated.slot,
                          status: updated.status,
                          instance_id: updated.instance_id,
                          parent_block_id: null, // TODO: —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å parent_block_id
                          depth: updated.depth || 0
                        };

                        setChanged((prev) => ({ ...prev, [updated.id]: layoutBlock }));
                        setIsDirty(true);
                      }}
                      isCanvasOver={isCanvasOver}
                    />
                  )}
                </div>
              )}
            </div>
          </main>

          {/* Unified Sidebar */}
          <UnifiedSidebar
            selectedBlockId={selectedBlockId}
            selectedBlock={selectedBlock || null}
            onBlockChange={handleBlockChange}
            onPublishToggle={handlePublishToggle}
            publishing={publishing}
            onBlockDelete={handleDeleteBlock}
            allBlocks={blockTree.flatMap(node => [node, ...node.children])}
            onMoveLeft={moveBlockLeft}
            onMoveRight={moveBlockRight}
            onAddBlock={handleAddBlockOfType}
            adding={adding}
            pageIdentifier={currentPageSlug}
            externalActiveView={sidebarActiveView}
            onViewChange={setSidebarActiveView}
          />
        </div>
      </div>

      {/* Drag Overlay –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ */}
      <DragOverlay>
        {activeBlock ? (
          <div className="bg-white dark:bg-gray-800 rounded-md shadow-lg border-2 border-blue-500 p-3 opacity-90 transform rotate-3">
            <div className="text-sm font-medium text-gray-900 dark:text-white">
              {blockRegistry[activeBlock.block_type]?.name || activeBlock.block_type}
            </div>
            {activeBlock.id !== 'temp-block' && (
              <div className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞
              </div>
            )}
          </div>
        ) : null}
      </DragOverlay>

      {/* Onboarding Tutorial */}
      <OnboardingTutorial
        isVisible={showTutorial}
        onComplete={handleTutorialComplete}
        onSkip={handleTutorialSkip}
      />
    </DndContext>
  );
};

export default LiveEditor;
