import React, { useState, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, Button, Select, Typography, Modal } from '@my-forum/ui';
import BlockLibrary from 'widgets/BlockLibrary';
import RevisionsModal from 'widgets/RevisionsModal';
import { ReusableBlocksLibrary } from 'features/ReusableBlocksLibrary';
import { useAppDispatch, useAppSelector } from 'store/hooks';
import { setLibraryOpen } from 'store/slices/reusableBlocksSlice';
import type { Database } from '@my-forum/db-types';

type PageRow = Database['public']['Tables']['pages']['Row'];

interface EditorToolbarProps {
  pageIdentifier: string;
  isDirty: boolean;
  saving: boolean;
  saveError: string | null;
  onSave: () => Promise<void>;
  onCancel: () => Promise<void>;
  onAddBlock: (type: string) => Promise<void>;
  adding: boolean;

  // Undo/Redo functionality
  onUndo?: () => void;
  onRedo?: () => void;
  canUndo?: boolean;
  canRedo?: boolean;

  // Templates
  // Templates removed - will be implemented later
  // templates: Array<{ id: string; title: string; blocks: unknown[] }>;
  // templatesLoading: boolean;
  // onApplyTemplate: (templateId: string) => Promise<void>;
  // applyingTemplate: boolean;
  // currentBlocks: any[];

  // Revisions
  revisions: Array<{ id: string; created_at: string }>;
  revisionsLoading: boolean;
  reverting: boolean;
  onCreateRevision: () => Promise<void>;
  onRevertRevision: (revisionId: string) => Promise<void>;

  // Pages navigation
  pages: PageRow[];
  pagesLoading: boolean;

  // UnifiedSidebar integration
  onOpenBlockLibrary?: () => void;
  onOpenReusableLibrary?: () => void;
}

const EditorToolbar: React.FC<EditorToolbarProps> = React.memo(({
  pageIdentifier,
  isDirty,
  saving,
  saveError,
  onSave,
  onCancel,
  onAddBlock,
  adding,
  revisions,
  revisionsLoading,
  reverting,
  onCreateRevision,
  onRevertRevision,
  pages,
  pagesLoading,
  onOpenBlockLibrary,
  onOpenReusableLibrary,
  onUndo,
  onRedo,
  canUndo = false,
  canRedo = false,
}) => {
  console.log('EditorToolbar: Rendering with pageIdentifier:', pageIdentifier);

  const navigate = useNavigate();
  const dispatch = useAppDispatch();
  const [showBlockLibrary, setShowBlockLibrary] = useState(false);
  // const [showTemplatesModal, setShowTemplatesModal] = useState(false);
  const [showRevisionsModal, setShowRevisionsModal] = useState(false);

  // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –±–ª–æ–∫–æ–≤
  const isReusableLibraryOpen = useAppSelector(state => state.reusableBlocks.isLibraryOpen);

  const handlePageChange = useCallback((pageSlug: string) => {
    if (pageSlug !== pageIdentifier) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      if (isDirty) {
        const confirmMessage = '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ? –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.';
        if (!window.confirm(confirmMessage)) {
          return;
        }
      }
      navigate(`/admin/editor/${pageSlug}`);
    }
  }, [pageIdentifier, isDirty, navigate]);

  return (
    <>
      <Card className="p-4 border-b">
        <div className="flex items-center justify-between">
          {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
          <div className="flex items-center gap-3">
            <Typography variant="h3" className="text-xl font-bold">
              –†–µ–¥–∞–∫—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            </Typography>

            {/* –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
            <div className="flex items-center gap-2">
              <Select
                value={pageIdentifier}
                onChange={(e) => handlePageChange(e.target.value)}
                disabled={pagesLoading}
                className="w-48"
              >
                {pagesLoading ? (
                  <option disabled>–ó–∞–≥—Ä—É–∑–∫–∞...</option>
                ) : (
                  pages.map((page) => (
                    <option key={page.id} value={page.slug}>
                      {page.title} ({page.slug})
                    </option>
                  ))
                )}
              </Select>
            </div>

            <div className="flex items-center gap-2">
              <Button
                onClick={() => {
                  console.log('üìö LIBRARY: Opening block library via sidebar');
                  if (onOpenBlockLibrary) {
                    onOpenBlockLibrary();
                  } else {
                    // Fallback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    setShowBlockLibrary(true);
                  }
                }}
                disabled={adding}
                size="sm"
              >
                ‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫
              </Button>

              {/* Undo/Redo –∫–Ω–æ–ø–∫–∏ */}
              {onUndo && (
                <Button
                  variant="secondary"
                  onClick={onUndo}
                  disabled={!canUndo}
                  size="sm"
                  title="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ (Ctrl+Z)"
                >
                  ‚Ü∂ Undo
                </Button>
              )}
              {onRedo && (
                <Button
                  variant="secondary"
                  onClick={onRedo}
                  disabled={!canRedo}
                  size="sm"
                  title="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (Ctrl+Y)"
                >
                  ‚Ü∑ Redo
                </Button>
              )}

              <Button
                variant="secondary"
                onClick={() => {
                  console.log('üîÑ REUSABLE: Opening reusable blocks library via sidebar');
                  if (onOpenReusableLibrary) {
                    onOpenReusableLibrary();
                  } else {
                    // Fallback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    dispatch(setLibraryOpen(true));
                  }
                }}
                size="sm"
              >
                üìö –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –±–ª–æ–∫–∏
              </Button>

              {/* <Button
                variant="secondary"
                onClick={() => setShowTemplatesModal(true)}
                disabled={templatesLoading}
                size="sm"
              >
                üìÑ –®–∞–±–ª–æ–Ω—ã
              </Button> */}

              <Button
                variant="secondary"
                onClick={() => setShowRevisionsModal(true)}
                disabled={revisionsLoading}
                size="sm"
              >
                üïí –†–µ–≤–∏–∑–∏–∏
              </Button>
            </div>
          </div>

          {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —Å—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
          <div className="flex items-center gap-3">
            {isDirty ? (
              <>
                <span className="text-sm text-orange-600 dark:text-orange-400 flex items-center gap-1">
                  <span className="animate-pulse">‚óè</span>
                  –ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                </span>
                <div className="flex items-center gap-2">
                  <Button variant="secondary" disabled={saving} onClick={onCancel} size="sm">
                    –û—Ç–º–µ–Ω–∏—Ç—å
                  </Button>
                  <Button
                    onClick={onSave}
                    disabled={saving}
                    loading={saving}
                    size="sm"
                    data-tutorial="save-button"
                  >
                    {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ‚Ä¶' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                  </Button>
                </div>
              </>
            ) : (
              <span className="text-sm text-green-600 dark:text-green-400 flex items-center gap-1">
                ‚úì –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
              </span>
            )}
          </div>
        </div>
        
        {saveError && (
          <div className="mt-3 p-2 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded text-sm text-red-700 dark:text-red-300">
            {saveError}
          </div>
        )}
      </Card>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –±–ª–æ–∫–æ–≤ */}
      {showBlockLibrary && (
        <Modal
          isOpen={showBlockLibrary}
          onClose={() => {
            console.log('EditorToolbar: Modal closed');
            setShowBlockLibrary(false);
          }}
          title="–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
        >
          <BlockLibrary
            onAddBlock={async (type) => {
              console.log('üìö LIBRARY: onAddBlock called with type:', type);
              try {
                console.log('üìö LIBRARY: Calling onAddBlock...');
                await onAddBlock(type);
                console.log('‚úÖ LIBRARY: Block added successfully');
                setShowBlockLibrary(false);
              } catch (error) {
                console.error('‚ùå LIBRARY: Error adding block:', error);
              }
            }}
            creating={adding}
          />
        </Modal>
      )}

      {/* –ú–µ–Ω–µ–¥–∂–µ—Ä —à–∞–±–ª–æ–Ω–æ–≤ - –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω */}
      {/* <TemplatesManager
        isOpen={showTemplatesModal}
        onClose={() => setShowTemplatesModal(false)}
        onApplyTemplate={(blocks) => {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–ª–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π —Å–∏—Å—Ç–µ–º–æ–π
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          console.log('Applying template with blocks:', blocks);
          // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º, —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
          setShowTemplatesModal(false);
        }}
        currentBlocks={currentBlocks}
      /> */}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–≤–∏–∑–∏–π */}
      <RevisionsModal
        isOpen={showRevisionsModal}
        onClose={() => setShowRevisionsModal(false)}
        revisions={revisions}
        loading={revisionsLoading}
        reverting={reverting}
        onCreateRevision={onCreateRevision}
        onRevertRevision={onRevertRevision}
      />

      {/* –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –±–ª–æ–∫–æ–≤ */}
      <ReusableBlocksLibrary
        isOpen={isReusableLibraryOpen}
        onClose={() => dispatch(setLibraryOpen(false))}
      />
    </>
  );
});

EditorToolbar.displayName = 'EditorToolbar';

export default EditorToolbar;
