import React, { useState, useCallback, useEffect } from 'react';
import { useDispatch } from 'react-redux';
import { Typography, Button, Input, Textarea, Spinner } from 'shared/ui/atoms';
import { Card } from 'shared/ui/atoms';
import {
  selectBlockWithEffectiveContent,
  selectBlockOriginalContent,
  selectBlockOverrides,
  selectIsBlockInstance
} from '../../store/selectors/blockSelectors';
import { useAppSelector } from '../../store/hooks';
import {
  setBlockOverride,
  removeBlockOverride,
  clearBlockOverrides
} from '../../store/slices/contentSlice';
import {
  updateBlockInstanceOverrides,
  getBlockInstanceOverrides
} from '../../shared/api/blockInstances';
import {
  mergeOverrides,
  getNestedProperty,
  hasOverride,
  removeOverride
} from '../../shared/lib/utils';

interface OverridesPanelProps {
  blockId: string;
  onSave?: () => void;
  onError?: (error: string) => void;
}

interface OverrideField {
  path: string;
  label: string;
  type: 'text' | 'textarea' | 'number' | 'color' | 'boolean';
  originalValue: any;
  currentValue: any;
  hasOverride: boolean;
}

const OverridesPanel: React.FC<OverridesPanelProps> = ({
  blockId,
  onSave,
  onError
}) => {
  const dispatch = useDispatch();
  const [saving, setSaving] = useState(false);
  const [loading, setLoading] = useState(false);

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞
  const block = useAppSelector(state => selectBlockWithEffectiveContent(state, blockId));
  const originalContent = useAppSelector(state => selectBlockOriginalContent(state, blockId));
  const overrides = useAppSelector(state => selectBlockOverrides(state, blockId));
  const isInstance = useAppSelector(state => selectIsBlockInstance(state, blockId));

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const [pendingOverrides, setPendingOverrides] = useState<Record<string, any>>(overrides || {});
  const [fields, setFields] = useState<OverrideField[]>([]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    if (originalContent && block) {
      const fieldList: OverrideField[] = [];

      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      const collectFields = (obj: any, prefix = '', labelPrefix = '') => {
        if (!obj || typeof obj !== 'object') return;

        for (const [key, value] of Object.entries(obj)) {
          const path = prefix ? `${prefix}.${key}` : key;
          const label = labelPrefix ? `${labelPrefix} > ${key}` : key;

          if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            collectFields(value, path, label);
          } else {
            // –û–±—ã—á–Ω–æ–µ –ø–æ–ª–µ
            const originalValue = getNestedProperty(originalContent, path);
            const currentValue = getNestedProperty(pendingOverrides, path) ?? originalValue;
            const fieldHasOverride = hasOverride(pendingOverrides, path);

            let fieldType: OverrideField['type'] = 'text';
            if (typeof originalValue === 'number') fieldType = 'number';
            else if (typeof originalValue === 'boolean') fieldType = 'boolean';
            else if (key.toLowerCase().includes('color')) fieldType = 'color';
            else if (typeof originalValue === 'string' && originalValue.length > 50) fieldType = 'textarea';

            fieldList.push({
              path,
              label,
              type: fieldType,
              originalValue,
              currentValue,
              hasOverride: fieldHasOverride
            });
          }
        }
      };

      collectFields(originalContent);
      setFields(fieldList);
    }
  }, [originalContent, block, pendingOverrides]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—è
  const handleFieldChange = useCallback((path: string, value: any) => {
    setPendingOverrides(prev => ({ ...prev, [path]: value }));

    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—è
    setFields(prev => prev.map(field =>
      field.path === path
        ? { ...field, currentValue: value, hasOverride: true }
        : field
    ));
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
  const handleResetField = useCallback((path: string) => {
    const newOverrides = removeOverride(pendingOverrides, path);
    setPendingOverrides(newOverrides);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—è
    setFields(prev => prev.map(field =>
      field.path === path
        ? {
            ...field,
            currentValue: field.originalValue,
            hasOverride: false
          }
        : field
    ));

    // –û–±–Ω–æ–≤–ª—è–µ–º Redux store
    dispatch(removeBlockOverride({ blockId, path }));
  }, [pendingOverrides, blockId, dispatch]);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const handleSave = useCallback(async () => {
    if (!block?.instance_id || !isInstance) return;

    setSaving(true);
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º Redux store
      dispatch(setBlockOverride({ blockId, path: '', value: pendingOverrides }));

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      await updateBlockInstanceOverrides(block.instance_id, pendingOverrides);

      onSave?.();
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è';
      onError?.(errorMessage);
    } finally {
      setSaving(false);
    }
  }, [block?.instance_id, isInstance, pendingOverrides, blockId, dispatch, onSave, onError]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
  const handleLoadFromServer = useCallback(async () => {
    if (!block?.instance_id || !isInstance) return;

    setLoading(true);
    try {
      const serverOverrides = await getBlockInstanceOverrides(block.instance_id);
      setPendingOverrides(serverOverrides);

      // –û–±–Ω–æ–≤–ª—è–µ–º Redux store
      dispatch(setBlockOverride({ blockId, path: '', value: serverOverrides }));
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è';
      onError?.(errorMessage);
    } finally {
      setLoading(false);
    }
  }, [block?.instance_id, isInstance, blockId, dispatch, onError]);

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
  const handleClearAll = useCallback(async () => {
    if (!block?.instance_id || !isInstance) return;

    setSaving(true);
    try {
      await updateBlockInstanceOverrides(block.instance_id, {});
      setPendingOverrides({});

      // –û–±–Ω–æ–≤–ª—è–µ–º Redux store
      dispatch(clearBlockOverrides(blockId));

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è
      setFields(prev => prev.map(field => ({
        ...field,
        currentValue: field.originalValue,
        hasOverride: false
      })));
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è';
      onError?.(errorMessage);
    } finally {
      setSaving(false);
    }
  }, [block?.instance_id, isInstance, blockId, dispatch, onError]);

  if (!isInstance) {
    return (
      <div className="p-4 text-center text-gray-500 dark:text-gray-400">
        <p>–≠—Ç–æ—Ç –±–ª–æ–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –±–ª–æ–∫–∞</p>
      </div>
    );
  }

  if (!block) {
    return (
      <div className="p-4 text-center">
        <Spinner className="w-6 h-6 mx-auto" />
        <p className="mt-2 text-gray-500 dark:text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞ –±–ª–æ–∫–∞...</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center justify-between">
        <Typography as="h3" variant="h3" className="text-lg">
          –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–ª–æ–∫–∞
        </Typography>
        <div className="flex gap-2">
          <Button
            onClick={handleLoadFromServer}
            disabled={loading}
            variant="secondary"
            size="sm"
          >
            {loading ? <Spinner className="w-4 h-4" /> : 'üîÑ'} –ó–∞–≥—Ä—É–∑–∏—Ç—å
          </Button>
          <Button
            onClick={handleClearAll}
            disabled={saving}
            variant="danger"
            size="sm"
          >
            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
          </Button>
          <Button
            onClick={handleSave}
            disabled={saving}
            variant="primary"
            size="sm"
          >
            {saving ? <Spinner className="w-4 h-4" /> : 'üíæ'} –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </Button>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π */}
      <div className="space-y-4">
        {fields.length === 0 ? (
          <div className="text-center py-8 text-gray-500 dark:text-gray-400">
            <p>–ù–µ—Ç –ø–æ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>
          </div>
        ) : (
          fields.map((field) => (
            <OverrideFieldComponent
              key={field.path}
              field={field}
              onChange={handleFieldChange}
              onReset={handleResetField}
            />
          ))
        )}
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <Card className="p-4">
        <div className="flex items-center justify-between text-sm">
          <span className="text-gray-600 dark:text-gray-400">–í—Å–µ–≥–æ –ø–æ–ª–µ–π:</span>
          <span>{fields.length}</span>
        </div>
        <div className="flex items-center justify-between text-sm">
          <span className="text-gray-600 dark:text-gray-400">–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ:</span>
          <span className="text-blue-600 dark:text-blue-400">
            {fields.filter(f => f.hasOverride).length}
          </span>
        </div>
      </Card>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
interface OverrideFieldComponentProps {
  field: OverrideField;
  onChange: (path: string, value: any) => void;
  onReset: (path: string) => void;
}

const OverrideFieldComponent: React.FC<OverrideFieldComponentProps> = ({
  field,
  onChange,
  onReset
}) => {
  const handleInputChange = (value: any) => {
    let processedValue = value;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    if (field.type === 'number') {
      processedValue = Number(value) || 0;
    } else if (field.type === 'boolean') {
      processedValue = Boolean(value);
    }

    onChange(field.path, processedValue);
  };

  const renderInput = () => {
    switch (field.type) {
      case 'textarea':
        return (
          <Textarea
            value={field.currentValue || ''}
            onChange={(e) => handleInputChange(e.target.value)}
            placeholder={field.originalValue}
            rows={3}
          />
        );

      case 'number':
        return (
          <Input
            type="number"
            value={field.currentValue || ''}
            onChange={(e) => handleInputChange(e.target.value)}
            placeholder={String(field.originalValue)}
          />
        );

      case 'boolean':
        return (
          <select
            value={String(field.currentValue)}
            onChange={(e) => handleInputChange(e.target.value === 'true')}
            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
          >
            <option value="true">–î–∞</option>
            <option value="false">–ù–µ—Ç</option>
          </select>
        );

      case 'color':
        return (
          <div className="flex gap-2">
            <Input
              type="color"
              value={field.currentValue || field.originalValue || '#000000'}
              onChange={(e) => handleInputChange(e.target.value)}
              className="w-16 h-10 p-1 border border-gray-300 dark:border-gray-600 rounded"
            />
            <Input
              type="text"
              value={field.currentValue || ''}
              onChange={(e) => handleInputChange(e.target.value)}
              placeholder={field.originalValue}
              className="flex-1"
            />
          </div>
        );

      default:
        return (
          <Input
            type="text"
            value={field.currentValue || ''}
            onChange={(e) => handleInputChange(e.target.value)}
            placeholder={field.originalValue}
          />
        );
    }
  };

  return (
    <div className="space-y-2">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <Typography as="label" variant="label" className="text-sm font-medium">
            {field.label}
          </Typography>
          {field.hasOverride && (
            <span className="inline-flex items-center px-2 py-1 text-xs font-medium bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded-full">
              –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
            </span>
          )}
        </div>
        {field.hasOverride && (
          <Button
            onClick={() => onReset(field.path)}
            variant="ghost"
            size="sm"
            className="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300"
          >
            ‚Ü∫ –°–±—Ä–æ—Å–∏—Ç—å
          </Button>
        )}
      </div>

      {renderInput()}

      {!field.hasOverride && (
        <p className="text-xs text-gray-500 dark:text-gray-400">
          –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {String(field.originalValue)}
        </p>
      )}
    </div>
  );
};

export default OverridesPanel;
