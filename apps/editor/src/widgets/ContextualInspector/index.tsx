import React, { useState, useCallback, useMemo } from 'react';
import type { Database } from '@my-forum/db-types';
import { Typography, Button, Spinner } from '@my-forum/ui';
import { blockRegistry } from 'shared/config/blockRegistry';
import { AnimatePresence, motion } from 'framer-motion';
import { Tabs, TabList, Tab } from '@my-forum/ui';
import { SpacingControl, ColorPicker, BorderControl, BackgroundControl } from './controls';
import { Breadcrumbs } from 'widgets/Breadcrumbs';
import { OverridesPanel } from 'widgets/OverridesPanel';
import { useAppSelector } from '../../store/hooks';
import { selectIsBlockInstance } from '../../store/selectors/blockSelectors';
import type { BlockNode } from '@my-forum/model';
import { BlockType } from '../../shared/consts/blockTypes';

type LayoutBlock = Database['public']['Tables']['layout_blocks']['Row'];

interface ContextualInspectorProps {
  block: BlockNode | LayoutBlock | null;
  isOpen: boolean;
  onClose: () => void;
  onBlockChange: (updatedBlock: BlockNode | LayoutBlock) => void;
  onPublishToggle?: (blockId: string) => Promise<void>;
  publishing?: boolean;
  onBlockDelete?: (blockId: string) => Promise<void>;
  // –î–ª—è —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫
  allBlocks?: (BlockNode | LayoutBlock)[];
  // –î–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –±–ª–æ–∫–æ–≤
  onMoveLeft?: (blockId: string) => void;
  onMoveRight?: (blockId: string) => void;
  // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏
  blockId?: string; // ID –±–ª–æ–∫–∞ –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
}

const ContextualInspector: React.FC<ContextualInspectorProps> = React.memo(({
  block,
  isOpen,
  onClose,
  onBlockChange,
  onPublishToggle,
  publishing = false,
  onBlockDelete,
  allBlocks = [],
  onMoveLeft,
  onMoveRight,
  blockId,
}) => {
  // –í—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ–º —Ö—É–∫–∏ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const isInstance = useAppSelector(state => blockId ? selectIsBlockInstance(state, blockId) : false);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –±–ª–æ–∫–∞
  const blockType = useMemo(() => {
    if (!block) return null;
    return 'block_type' in block ? block.block_type : (block as any).type;
  }, [block]);

  const [activeTab, setActiveTab] = useState<number>(isInstance ? 0 : 1);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –í–°–ï–ì–î–ê –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
  const getBlockIcon = useCallback((blockType: string) => {
    switch (blockType) {
      case 'header': return 'üè†';
      case 'container_section': return 'üì¶';
      case 'button_group': return 'üîò';
      case 'categories_section': return 'üìÅ';
      case 'controls_section': return '‚öôÔ∏è';
      case 'properties_section': return 'üè¢';
      case 'animations_section': return 'üé¨';
      case 'changelog_section': return 'üìù';
      case 'heading': return 'üì∞';
      case 'paragraph': return 'üìÑ';
      case 'single_image': return 'üñºÔ∏è';
      case 'single_button': return 'üîò';
      case 'spacer': return 'üìè';
      default: return 'üìÑ';
    }
  }, []);

  const getStatusInfo = useCallback((status: string) => {
    switch (status) {
      case 'published':
        return { text: '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω', color: 'text-green-600 dark:text-green-400', icon: '‚úì' };
      case 'draft':
        return { text: '–ß–µ—Ä–Ω–æ–≤–∏–∫', color: 'text-yellow-600 dark:text-yellow-400', icon: '‚óã' };
      default:
        return { text: status, color: 'text-gray-500 dark:text-gray-400', icon: '‚óã' };
    }
  }, []);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
  const statusInfo = useMemo(() => getStatusInfo(block.status), [block.status, getStatusInfo]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
  const canMoveLeft = (block: LayoutBlock): boolean => {
    if (!allBlocks) return false;

    const pageBlocks = allBlocks
      .filter(b => b.page_id === block.page_id)
      .sort((a, b) => (a.position ?? 0) - (b.position ?? 0));

    const currentIndex = pageBlocks.findIndex(b => b.id === block.id);
    return currentIndex > 0;
  };

  const canMoveRight = (block: LayoutBlock): boolean => {
    if (!allBlocks) return false;

    const pageBlocks = allBlocks
      .filter(b => b.page_id === block.page_id)
      .sort((a, b) => (a.position ?? 0) - (b.position ?? 0));

    const currentIndex = pageBlocks.findIndex(b => b.id === block.id);
    return currentIndex >= 0 && currentIndex < pageBlocks.length - 1;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è metadata
  const handleMetadataChange = (newMetadata: Record<string, unknown>) => {
    const updated: LayoutBlock = { ...block, metadata: newMetadata } as LayoutBlock;
    onBlockChange(updated);
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ x: '100%', opacity: 0 }}
          animate={{ x: 0, opacity: 1 }}
          exit={{ x: '100%', opacity: 0 }}
          transition={{ type: 'spring', stiffness: 300, damping: 30 }}
          className="fixed top-0 right-0 h-full w-96 bg-white dark:bg-gray-900 border-l border-gray-200 dark:border-gray-700 shadow-xl z-50 overflow-y-auto"
        >
          <div className="p-6 space-y-6">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ */}
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <span className="text-xl">{getBlockIcon(block.block_type)}</span>
                <Typography as="h2" variant="h2" className="text-lg">
                  {spec.name}
                </Typography>
              </div>
              <Button onClick={onClose} size="sm" variant="ghost">
                ‚úï
              </Button>
            </div>

            {/* –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ */}
            <Breadcrumbs
              selectedBlock={block}
              allBlocks={allBlocks}
              onSelectBlock={(blockId) => {
                // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                if (blockId && blockId !== block.id) {
                  // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–≥–æ –±–ª–æ–∫–∞
                  console.log('Navigate to block:', blockId);
                }
              }}
              visible={true}
            />

            {/* –ú–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–µ */}
            <div className="space-y-2">
              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-500 dark:text-gray-400">–ü–æ–∑–∏—Ü–∏—è:</span>
                <span>#{block.position}</span>
              </div>

              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-500 dark:text-gray-400">–°—Ç–∞—Ç—É—Å:</span>
                <span className={statusInfo.color}>
                  {statusInfo.icon} {statusInfo.text}
                </span>
              </div>

              {block.parent_block_id && block.slot && (
                <div className="flex items-center justify-between text-sm">
                  <span className="text-gray-500 dark:text-gray-400">–°–ª–æ—Ç:</span>
                  <span className="text-purple-600 dark:text-purple-400">
                    {block.slot}
                  </span>
                </div>
              )}
            </div>

            {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–µ–π –±–ª–æ–∫–∞ */}
            <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
              <Typography as="h3" className="text-sm font-semibold text-gray-700 dark:text-gray-300 mb-3">
                –ü–æ–∑–∏—Ü–∏—è –±–ª–æ–∫–∞
              </Typography>

              <div className="space-y-2">
                <div className="text-xs text-gray-500 dark:text-gray-400">
                  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏—à–∏ —Å—Ç—Ä–µ–ª–æ–∫ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:
                </div>

                <div className="flex items-center justify-between gap-2">
                  <Button
                    onClick={() => onMoveLeft?.(block.id)}
                    disabled={!canMoveLeft(block as any)}
                    variant="secondary"
                    size="sm"
                    className="flex-1"
                  >
                    ‚Üê –í–ª–µ–≤–æ
                  </Button>

                  <Button
                    onClick={() => onMoveRight?.(block.id)}
                    disabled={!canMoveRight(block as any)}
                    variant="secondary"
                    size="sm"
                    className="flex-1"
                  >
                    –í–ø—Ä–∞–≤–æ ‚Üí
                  </Button>
                </div>

                <div className="text-xs text-gray-500 dark:text-gray-400 text-center space-y-1">
                  <div>
                    –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <kbd className="px-1 py-0.5 bg-gray-200 dark:bg-gray-700 rounded text-xs">‚Üê</kbd> <kbd className="px-1 py-0.5 bg-gray-200 dark:bg-gray-700 rounded text-xs">‚Üí</kbd>
                  </div>
                  <div>
                    –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ –±–ª–æ–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞
                  </div>
                </div>
              </div>
            </div>

            {/* –û–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞ */}
            {spec.description && (
              <div className="text-sm text-gray-600 dark:text-gray-300 bg-gray-50 dark:bg-gray-800/50 rounded-lg p-3">
                {spec.description}
              </div>
            )}

            {/* –í–∫–ª–∞–¥–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ */}
            <Tabs value={activeTab} onChange={setActiveTab} className="w-full">
              <TabList className="mb-4">
                {isInstance && (
                  <Tab index={0} className="text-sm">
                    üîÑ –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                  </Tab>
                )}
                <Tab index={isInstance ? 1 : 0} className="text-sm">
                  üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–ª–æ–∫–∞
                </Tab>
                <Tab index={isInstance ? 2 : 1} className="text-sm">
                  üé® –î–∏–∑–∞–π–Ω
                </Tab>
              </TabList>

              {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ */}
              {activeTab === 0 && isInstance && blockId && (
                <div className="space-y-4">
                  <OverridesPanel
                    blockId={blockId}
                    onSave={() => {
                      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
                      console.log('Overrides saved successfully');
                    }}
                    onError={(error) => {
                      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
                      console.error('Overrides save error:', error);
                    }}
                  />
                </div>
              )}

              {activeTab === (isInstance ? 1 : 0) && (
                <div className="space-y-4">
                  <Editor
                    data={data}
                    onChange={(newData) => {
                      try {
                        if (spec.schema) {
                          // eslint-disable-next-line @typescript-eslint/no-explicit-any
                          const result = (spec.schema as any).safeParse(newData);
                          if (!result.success) {
                            console.warn('Validation error:', result.error?.errors?.[0]?.message);
                            return;
                          }
                        }
                        const updated: LayoutBlock = { ...block, content: newData as object } as LayoutBlock;
                        onBlockChange(updated);
                      } catch (error) {
                        console.warn('Error updating block:', error);
                      }
                    }}
                  />
                </div>
              )}

              {activeTab === (isInstance ? 2 : 1) && (
                <div className="space-y-4">
                {/* –î–∏–∑–∞–π–Ω –∫–æ–Ω—Ç—Ä–æ–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –±–ª–æ–∫–∞ */}
                {(block.block_type === BlockType.CONTAINER_SECTION || block.block_type === BlockType.SINGLE_BUTTON || block.block_type === BlockType.HEADING || block.block_type === BlockType.TABS || block.block_type === BlockType.ACCORDION) && (
                  <>
                    {/* Spacing Control */}
                    <SpacingControl
                      value={metadata.spacing as any}
                      onChange={(spacing) => handleMetadataChange({ ...metadata, spacing })}
                    />

                    {/* Border Control –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ –∫–Ω–æ–ø–∫–∏ */}
                    {(block.block_type === BlockType.CONTAINER_SECTION || block.block_type === BlockType.SINGLE_BUTTON) && (
                      <BorderControl
                        value={metadata.border as any}
                        onChange={(border) => handleMetadataChange({ ...metadata, border })}
                      />
                    )}

                    {/* Background Control –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */}
                    {block.block_type === BlockType.CONTAINER_SECTION && (
                      <BackgroundControl
                        value={metadata.background as any}
                        onChange={(background) => handleMetadataChange({ ...metadata, background })}
                      />
                    )}

                    {/* Color Picker –¥–ª—è —Ç–µ–∫—Å—Ç–∞ */}
                    {(block.block_type === BlockType.SINGLE_BUTTON || block.block_type === BlockType.HEADING) && (
                      <ColorPicker
                        label="–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞"
                        value={metadata.textColor as string}
                        onChange={(textColor) => handleMetadataChange({ ...metadata, textColor })}
                      />
                    )}
                  </>
                )}

                {/* –ï—Å–ª–∏ –±–ª–æ–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–∏–∑–∞–π–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
                {!(block.block_type === BlockType.CONTAINER_SECTION || block.block_type === BlockType.SINGLE_BUTTON || block.block_type === BlockType.HEADING || block.block_type === BlockType.TABS || block.block_type === BlockType.ACCORDION) && (
                  <div className="text-center py-8 text-gray-500 dark:text-gray-400">
                    <div className="text-2xl mb-2">üé®</div>
                    <p className="text-sm">–î–∏–∑–∞–π–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –±–ª–æ–∫–∞</p>
                  </div>
                )}
                </div>
              )}
            </Tabs>

            {/* –ü–∞–Ω–µ–ª—å —É–¥–∞–ª–µ–Ω–∏—è */}
            {onBlockDelete && (
              <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
                <Typography as="h3" className="text-sm font-semibold text-gray-700 dark:text-gray-300 mb-3">
                  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–æ–º
                </Typography>

                <Button
                  onClick={() => onBlockDelete(block.id)}
                  variant="danger"
                  className="w-full"
                >
                  üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫
                </Button>
              </div>
            )}

            {/* –ü–∞–Ω–µ–ª—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ */}
            {onPublishToggle && (
              <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
                <Typography as="h3" className="text-sm font-semibold text-gray-700 dark:text-gray-300 mb-3">
                  –ü—É–±–ª–∏–∫–∞—Ü–∏—è
                </Typography>
                
                <Button
                  onClick={() => onPublishToggle(block.id)}
                  disabled={publishing}
                  variant={block.status === 'published' ? 'secondary' : 'primary'}
                  className="w-full"
                >
                  {publishing ? (
                    <>
                      <Spinner className="w-4 h-4 mr-1" />
                      –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ‚Ä¶
                    </>
                  ) : block.status === 'published' ? (
                    '–°–Ω—è—Ç—å —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'
                  ) : (
                    '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å'
                  )}
                </Button>
              </div>
            )}
          </div>
        </motion.div>
      )}
    </AnimatePresence>
  );
});

ContextualInspector.displayName = 'ContextualInspector';

export default ContextualInspector;

