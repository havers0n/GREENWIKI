import React, { useState } from 'react';
import { ContextualInspector } from './ContextualInspector';
import { getBlockInspectorConfig, hasBlockInspectorConfig } from './inspectorRegistry';

/**
 * –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É ContextualInspector
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤
 */
export const InspectorMigrationExample: React.FC = () => {
  const [selectedBlock, setSelectedBlock] = useState<any>(null);
  const [isInspectorOpen, setIsInspectorOpen] = useState(false);

  // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –∏–∑ inspectorRegistry
  const availableBlocks = Object.keys(require('./inspectorRegistry').inspectorRegistry);

  const selectBlock = (blockType: string) => {
    const config = getBlockInspectorConfig(blockType);
    if (config) {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      const testBlock = {
        id: `test-${blockType}-${Date.now()}`,
        block_type: blockType,
        content: {},
        metadata: {},
        status: 'draft',
        position: 1,
      };

      // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      config.forEach(section => {
        section.controls.forEach(control => {
          const defaultValue = getDefaultValueForControl(control);
          if (defaultValue !== undefined) {
            const isContentField = ['text', 'href', 'level', 'id', 'description', 'content', 'title'].includes(control.propName);
            const target = isContentField ? testBlock.content : testBlock.metadata;
            (target as any)[control.propName] = defaultValue;
          }
        });
      });

      setSelectedBlock(testBlock);
      setIsInspectorOpen(true);
    }
  };

  const handleBlockChange = (updatedBlock: any) => {
    setSelectedBlock(updatedBlock);
    console.log('Block updated:', updatedBlock);
  };

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-8">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
        –ü–æ–ª–Ω–∞—è –ú–∏–≥—Ä–∞—Ü–∏—è ContextualInspector
      </h1>

      <div className="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4">
        <div className="flex items-center gap-2 text-green-800 dark:text-green-200">
          <span className="text-xl">‚úÖ</span>
          <span className="font-medium">–í—Å–µ –±–ª–æ–∫–∏ —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É!</span>
        </div>
        <p className="text-sm text-green-700 dark:text-green-300 mt-2">
          –¢–µ–ø–µ—Ä—å ContextualInspector —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –µ–¥–∏–Ω–æ–≥–æ —É—Å–ª–æ–≤–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –≤—ã–±–æ—Ä –±–ª–æ–∫–∞ */}
        <div className="space-y-6">
          <h2 className="text-2xl font-semibold text-gray-800 dark:text-gray-200">
            –í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          </h2>

          <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {availableBlocks.map((blockType) => {
              const config = getBlockInspectorConfig(blockType);
              const hasConfig = hasBlockInspectorConfig(blockType);
              const sectionCount = config?.length || 0;

              return (
                <button
                  key={blockType}
                  onClick={() => selectBlock(blockType)}
                  className={`p-4 border rounded-lg text-left transition-all hover:shadow-md ${
                    hasConfig
                      ? 'border-green-200 dark:border-green-700 bg-green-50 dark:bg-green-900/20 hover:border-green-300'
                      : 'border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800 cursor-not-allowed'
                  }`}
                  disabled={!hasConfig}
                >
                  <div className="flex items-center gap-2 mb-2">
                    <span className="text-lg">
                      {getBlockTypeIcon(blockType)}
                    </span>
                    <span className="font-medium text-gray-900 dark:text-gray-100 capitalize">
                      {blockType.replace('_', ' ')}
                    </span>
                  </div>
                  <div className="text-xs text-gray-600 dark:text-gray-400">
                    {hasConfig ? `${sectionCount} —Å–µ–∫—Ü–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫` : '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
                  </div>
                  {hasConfig && (
                    <div className="mt-2 text-xs text-green-600 dark:text-green-400">
                      ‚úÖ –ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
                    </div>
                  )}
                </button>
              );
            })}
          </div>

          {selectedBlock && (
            <div className="mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
              <h3 className="text-lg font-medium text-blue-900 dark:text-blue-100 mb-3">
                –¢–µ–∫—É—â–∏–π –±–ª–æ–∫: {selectedBlock.block_type}
              </h3>

              <div className="space-y-2 text-sm text-blue-800 dark:text-blue-200">
                <div><strong>ID:</strong> {selectedBlock.id}</div>
                <div><strong>–°—Ç–∞—Ç—É—Å:</strong> {selectedBlock.status}</div>
                <div><strong>–ü–æ–∑–∏—Ü–∏—è:</strong> {selectedBlock.position}</div>

                {Object.keys(selectedBlock.content || {}).length > 0 && (
                  <div>
                    <strong>Content:</strong>
                    <pre className="mt-1 text-xs bg-blue-100 dark:bg-blue-800 p-2 rounded overflow-x-auto">
                      {JSON.stringify(selectedBlock.content, null, 2)}
                    </pre>
                  </div>
                )}

                {Object.keys(selectedBlock.metadata || {}).length > 0 && (
                  <div>
                    <strong>Metadata:</strong>
                    <pre className="mt-1 text-xs bg-blue-100 dark:bg-blue-800 p-2 rounded overflow-x-auto">
                      {JSON.stringify(selectedBlock.metadata, null, 2)}
                    </pre>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ */}
        <div className="space-y-6">
          <h2 className="text-2xl font-semibold text-gray-800 dark:text-gray-200">
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
          </h2>

          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div className="p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
                <div className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                  {availableBlocks.length}
                </div>
                <div className="text-sm text-gray-600 dark:text-gray-400">
                  –í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤
                </div>
              </div>

              <div className="p-4 bg-green-50 dark:bg-green-900/20 rounded-lg">
                <div className="text-2xl font-bold text-green-600 dark:text-green-400">
                  {availableBlocks.filter(blockType => hasBlockInspectorConfig(blockType)).length}
                </div>
                <div className="text-sm text-green-600 dark:text-green-400">
                  –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ
                </div>
              </div>
            </div>

            <div className="p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
              <div className="text-lg font-medium text-blue-900 dark:text-blue-100 mb-2">
                –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:
              </div>
              <ul className="text-sm text-blue-800 dark:text-blue-200 space-y-1">
                <li>‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω–∞—è</li>
                <li>‚úÖ –õ–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä—è–µ–º–∞—è</li>
                <li>‚úÖ –ë–µ–∑ –∂–µ—Å—Ç–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π</li>
                <li>‚úÖ –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</li>
                <li>‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è</li>
              </ul>
            </div>

            <div className="p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg">
              <div className="text-lg font-medium text-purple-900 dark:text-purple-100 mb-2">
                –£–¥–∞–ª–µ–Ω–Ω—ã–π –∫–æ–¥:
              </div>
              <ul className="text-sm text-purple-800 dark:text-purple-200 space-y-1">
                <li>‚ùå if (block.block_type === 'heading')</li>
                <li>‚ùå switch (blockType) –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</li>
                <li>‚ùå –ñ–µ—Å—Ç–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏</li>
                <li>‚ùå –£—Å–ª–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞</li>
              </ul>
            </div>
          </div>

          <div className="p-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg">
            <div className="flex items-start gap-3">
              <span className="text-yellow-600 dark:text-yellow-400 text-xl mt-0.5">üöÄ</span>
              <div>
                <h3 className="font-medium text-yellow-900 dark:text-yellow-100">
                  –ß—Ç–æ –¥–∞–ª—å—à–µ?
                </h3>
                <p className="text-sm text-yellow-800 dark:text-yellow-200 mt-1">
                  –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –±–ª–æ–∫–∏, –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–≤–∞—è –∏—Ö –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ inspectorRegistry.
                  ContextualInspector –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞!
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* –ù–æ–≤—ã–π ContextualInspector */}
      <ContextualInspector
        block={selectedBlock}
        isOpen={isInspectorOpen}
        onClose={() => setIsInspectorOpen(false)}
        onBlockChange={handleBlockChange}
      />
    </div>
  );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getBlockTypeIcon(blockType: string): string {
  const icons: Record<string, string> = {
    heading: 'üì∞',
    text: 'üìù',
    image: 'üñºÔ∏è',
    button: 'üîò',
    spacer: 'üìè',
    section: 'üì¶',
    icon: 'üî∑',
    columns: 'üìä',
    tabs: 'üìë',
    accordion: 'üìã',
    container: 'üì¶',
    card: 'üÉè',
  };
  return icons[blockType] || 'üìÑ';
}

function getDefaultValueForControl(control: any): any {
  switch (control.type) {
    case 'Input':
      if (control.inputType === 'number') return 0;
      return control.placeholder || '';
    case 'Select':
      return control.options?.[0]?.value || '';
    case 'Switch':
      return false;
    case 'Textarea':
      return control.placeholder || '';
    default:
      return undefined;
  }
}

export default InspectorMigrationExample;
