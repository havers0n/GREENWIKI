import React from 'react';
import { AnimatePresence, motion } from 'framer-motion';
import { Tabs, TabList, Tab, TabPanel } from '../Tabs';
import { InspectorSection } from '../InspectorSection';
import { InspectorField } from '../InspectorField';
import { ControlRenderer } from './ControlRenderer';
import { getBlockInspectorConfig } from './inspectorRegistry';
import type { BlockInspectorConfig, InspectorSectionConfig, BlockData } from './types';

export interface ContextualInspectorProps {
  block: {
    id: string;
    block_type: string;
    content?: any;
    metadata?: Record<string, any>;
    status?: string;
    position?: number;
  } | null;
  isOpen: boolean;
  onClose: () => void;
  onBlockChange: (updatedBlock: any) => void;
  className?: string;
}

/**
 * –ù–æ–≤—ã–π ContextualInspector —Å –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–±–∞–≤–ª–µ–Ω –æ—Ç –∂–µ—Å—Ç–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç —Ç–∏–ø–æ–≤ –±–ª–æ–∫–æ–≤
 */
export const ContextualInspector: React.FC<ContextualInspectorProps> = ({
  block,
  isOpen,
  onClose,
  onBlockChange,
  className,
}) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–ª–æ–∫–∞
  if (!block) return null;

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–∏–ø–∞ –±–ª–æ–∫–∞
  const config = getBlockInspectorConfig(block.block_type);

  // –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (!config) {
    return (
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ x: '100%', opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            exit={{ x: '100%', opacity: 0 }}
            transition={{ type: 'spring', stiffness: 300, damping: 30 }}
            className={`fixed top-0 right-0 h-full w-96 bg-white dark:bg-gray-900 border-l border-gray-200 dark:border-gray-700 shadow-xl z-50 overflow-y-auto ${className || ''}`}
          >
            <div className="p-6 space-y-6">
              <div className="flex items-center justify-between">
                <h2 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
                  –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä
                </h2>
                <button
                  onClick={onClose}
                  className="p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-800"
                  aria-label="–ó–∞–∫—Ä—ã—Ç—å –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä"
                >
                  ‚úï
                </button>
              </div>

              <div className="text-center py-12 text-gray-500 dark:text-gray-400">
                <div className="text-4xl mb-4">üîß</div>
                <p className="text-sm">
                  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –±–ª–æ–∫–∞ —Ç–∏–ø–∞ <code className="bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded text-xs">{block.block_type}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                </p>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    );
  }

  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞
  const blockData: BlockData = {
    content: block.content || {},
    metadata: block.metadata || {},
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–∞
  const handleBlockDataChange = (sectionKey: 'content' | 'metadata', propName: string, value: any) => {
    const updatedBlock = {
      ...block,
      [sectionKey]: {
        ...(block[sectionKey] || {}),
        [propName]: value,
      },
    };
    onBlockChange(updatedBlock);
  };

  // –†–µ–Ω–¥–µ—Ä–∏–º —Å–µ–∫—Ü–∏–∏ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞
  const renderSection = (section: InspectorSectionConfig, sectionIndex: number) => (
    <InspectorSection
      key={sectionIndex}
      title={section.title}
      icon={section.icon}
      collapsible={section.collapsible}
      defaultExpanded={section.defaultExpanded}
    >
      <div className="space-y-4">
        {section.description && (
          <p className="text-sm text-gray-600 dark:text-gray-400">
            {section.description}
          </p>
        )}

        {section.controls.map((control, controlIndex) => {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–∞
          const isContentField = ['text', 'href', 'level', 'id', 'description'].includes(control.propName);
          const dataSource = isContentField ? 'content' : 'metadata';
          const currentValue = blockData[dataSource]?.[control.propName];

          return (
            <InspectorField
              key={controlIndex}
              label={control.label}
              hint={control.hint}
              required={control.required}
            >
              <ControlRenderer
                control={control}
                value={currentValue}
                onChange={(value) => handleBlockDataChange(dataSource, control.propName, value)}
                disabled={false}
              />
            </InspectorField>
          );
        })}
      </div>
    </InspectorSection>
  );

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
  const contentSections = config.filter(section =>
    section.controls.some(control => ['text', 'href', 'level', 'id', 'description'].includes(control.propName))
  );

  const designSections = config.filter(section =>
    section.controls.some(control => !['text', 'href', 'level', 'id', 'description'].includes(control.propName))
  );

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ x: '100%', opacity: 0 }}
          animate={{ x: 0, opacity: 1 }}
          exit={{ x: '100%', opacity: 0 }}
          transition={{ type: 'spring', stiffness: 300, damping: 30 }}
          className={`fixed top-0 right-0 h-full w-96 bg-white dark:bg-gray-900 border-l border-gray-200 dark:border-gray-700 shadow-xl z-50 overflow-y-auto ${className || ''}`}
        >
          <div className="p-6 space-y-6">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <span className="text-xl">
                  {getBlockTypeIcon(block.block_type)}
                </span>
                <h2 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
                  {getBlockTypeName(block.block_type)}
                </h2>
              </div>
              <button
                onClick={onClose}
                className="p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-800"
                aria-label="–ó–∞–∫—Ä—ã—Ç—å –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä"
              >
                ‚úï
              </button>
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–µ */}
            <div className="space-y-2">
              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-500 dark:text-gray-400">–ü–æ–∑–∏—Ü–∏—è:</span>
                <span>#{block.position || 0}</span>
              </div>
              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-500 dark:text-gray-400">–°—Ç–∞—Ç—É—Å:</span>
                <span className={getStatusColor(block.status || 'draft')}>
                  {getStatusIcon(block.status || 'draft')} {getStatusText(block.status || 'draft')}
                </span>
              </div>
            </div>

            {/* –í–∫–ª–∞–¥–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ */}
            <Tabs defaultValue={0} className="w-full">
              <TabList className="mb-4">
                <Tab index={0} className="text-sm">
                  üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
                </Tab>
                <Tab index={1} className="text-sm">
                  üé® –î–∏–∑–∞–π–Ω
                </Tab>
              </TabList>

              <TabPanel index={0} className="space-y-4">
                {contentSections.length > 0 ? (
                  contentSections.map(renderSection)
                ) : (
                  <div className="text-center py-8 text-gray-500 dark:text-gray-400">
                    <div className="text-2xl mb-2">üìù</div>
                    <p className="text-sm">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞</p>
                  </div>
                )}
              </TabPanel>

              <TabPanel index={1} className="space-y-4">
                {designSections.length > 0 ? (
                  designSections.map((section, index) => renderSection(section, index))
                ) : (
                  <div className="text-center py-8 text-gray-500 dark:text-gray-400">
                    <div className="text-2xl mb-2">üé®</div>
                    <p className="text-sm">–î–∏–∑–∞–π–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞</p>
                  </div>
                )}
              </TabPanel>
            </Tabs>
          </div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getBlockTypeIcon(blockType: string): string {
  const icons: Record<string, string> = {
    heading: 'üì∞',
    single_button: 'üîò',
    container_section: 'üì¶',
    paragraph: 'üìÑ',
    single_image: 'üñºÔ∏è',
    spacer: 'üìè',
  };
  return icons[blockType] || 'üìÑ';
}

function getBlockTypeName(blockType: string): string {
  const names: Record<string, string> = {
    heading: '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
    single_button: '–ö–Ω–æ–ø–∫–∞',
    container_section: '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä',
    paragraph: '–ü–∞—Ä–∞–≥—Ä–∞—Ñ',
    single_image: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
    spacer: '–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å',
  };
  return names[blockType] || '–ë–ª–æ–∫';
}

function getStatusIcon(status: string): string {
  const icons: Record<string, string> = {
    published: '‚úì',
    draft: '‚óã',
  };
  return icons[status] || '‚óã';
}

function getStatusText(status: string): string {
  const texts: Record<string, string> = {
    published: '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω',
    draft: '–ß–µ—Ä–Ω–æ–≤–∏–∫',
  };
  return texts[status] || status;
}

function getStatusColor(status: string): string {
  const colors: Record<string, string> = {
    published: 'text-green-600 dark:text-green-400',
    draft: 'text-yellow-600 dark:text-yellow-400',
  };
  return colors[status] || 'text-gray-500 dark:text-gray-400';
}
